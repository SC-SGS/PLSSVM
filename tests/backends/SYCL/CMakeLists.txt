## Authors: Alexander Van Craen, Marcel Breyer
## Copyright (C): 2018-today The PLSSVM project - All Rights Reserved
## License: This file is part of the PLSSVM project which is released under the MIT license.
##          See the LICENSE.md file in the project root for full license information.
########################################################################################################################

## create SYCL tests
set(PLSSVM_SYCL_TEST_NAME SYCL_tests)


# function to register the available SYCL implementations for the SYCL tests
function(create_sycl_tests include_name namespace_name)
    # TODO: no copy-paste
    configure_file(${CMAKE_CURRENT_LIST_DIR}/mock_sycl_csvm.hpp "${CMAKE_CURRENT_LIST_DIR}/../autogenerated/${include_name}/mock_sycl_csvm.hpp")
    configure_file(${CMAKE_CURRENT_LIST_DIR}/sycl_csvm.cpp ${CMAKE_CURRENT_LIST_DIR}/../autogenerated/${include_name}/sycl_csvm.cpp)
    configure_file(${CMAKE_CURRENT_LIST_DIR}/exceptions.cpp ${CMAKE_CURRENT_LIST_DIR}/../autogenerated/${include_name}/exceptions.cpp)
    configure_file(${CMAKE_CURRENT_LIST_DIR}/detail/device_ptr.cpp ${CMAKE_CURRENT_LIST_DIR}/../autogenerated/${include_name}/detail/device_ptr.cpp)
    configure_file(${CMAKE_CURRENT_LIST_DIR}/detail/utility.cpp ${CMAKE_CURRENT_LIST_DIR}/../autogenerated/${include_name}/detail/utility.cpp)

    # add test executable
    add_executable("${PLSSVM_SYCL_TEST_NAME}_${include_name}" ${CMAKE_CURRENT_LIST_DIR}/../../main.cpp
            ${CMAKE_CURRENT_LIST_DIR}/../autogenerated/${include_name}/sycl_csvm.cpp
            ${CMAKE_CURRENT_LIST_DIR}/../autogenerated/${include_name}/exceptions.cpp
            ${CMAKE_CURRENT_LIST_DIR}/../autogenerated/${include_name}/detail/device_ptr.cpp
            ${CMAKE_CURRENT_LIST_DIR}/../autogenerated/${include_name}/detail/utility.cpp
            ${CMAKE_CURRENT_LIST_DIR}/implementation_type.cpp
            ${CMAKE_CURRENT_LIST_DIR}/kernel_invocation_type.cpp)

    if("${namespace_name}" STREQUAL "hipsycl")
        target_include_directories("${PLSSVM_SYCL_TEST_NAME}_${include_name}" PRIVATE $ENV{PLSSVM_SYCL_HIPSYCL_INCLUDE_DIR})
    elseif("${namespace_name}" STREQUAL "dpcpp")
        target_include_directories("${PLSSVM_SYCL_TEST_NAME}_${include_name}" PRIVATE $ENV{PLSSVM_SYCL_DPCPP_INCLUDE_DIR})
    endif()

    # link against test library
    target_link_libraries("${PLSSVM_SYCL_TEST_NAME}_${include_name}" PUBLIC ${PLSSVM_BASE_TEST_LIBRARY_NAME})

    # add tests to google test
    gtest_add_tests(TARGET "${PLSSVM_SYCL_TEST_NAME}_${include_name}" WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/tests)

    # add test as coverage dependency
    if(TARGET coverage)
        add_dependencies(coverage "${PLSSVM_SYCL_TEST_NAME}_${include_name}")
    endif()
endfunction()


include(GoogleTest)

if(TARGET ${PLSSVM_SYCL_BACKEND_HIPSYCL_LIBRARY_NAME})
    # configure hipSYCL files
    set(PLSSVM_SYCL_BACKEND_INCLUDE_NAME "hipSYCL")
    set(PLSSVM_SYCL_BACKEND_NAMESPACE_NAME "hipsycl")
    create_sycl_tests(${PLSSVM_SYCL_BACKEND_INCLUDE_NAME} ${PLSSVM_SYCL_BACKEND_NAMESPACE_NAME})
endif()

if(TARGET ${PLSSVM_SYCL_BACKEND_DPCPP_LIBRARY_NAME})
    # configure DPC++ files
    set(PLSSVM_SYCL_BACKEND_INCLUDE_NAME "DPCPP")
    set(PLSSVM_SYCL_BACKEND_NAMESPACE_NAME "dpcpp")
    create_sycl_tests(${PLSSVM_SYCL_BACKEND_INCLUDE_NAME} ${PLSSVM_SYCL_BACKEND_NAMESPACE_NAME})
endif()
