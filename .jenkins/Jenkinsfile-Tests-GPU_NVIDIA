#!groovy

def buildbadge = addEmbeddableBadgeConfiguration(id: "Jenkins", subject: "Jenkins Tests", status: "skipped")

if (currentBuild.getBuildCauses().toString().contains('BranchIndexingCause')) {
    print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} triggered by branch indexing..."
    if (env.BRANCH_NAME != "master") {
        if (env.BUILD_NUMBER != "1") { // Always execute first build to load this configuration and thus the triggers
            print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} skipped due being triggered by Branch Indexing instead of SCM change!"
            buildbadge.setStatus('skipped')
            currentBuild.result = 'ABORTED'
            return // early exit to avoid redundant builds
        }
    }
} else {
    print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} triggered by SCM change..."
    print "Proceeding!"
}

pipeline {
    agent { label 'pcsgs02 || pcsgs03 || pcsgs04 || pcsgs05' }

    options {
        buildDiscarder(
            logRotator(
                daysToKeepStr: "21",
                numToKeepStr: "50",
                artifactDaysToKeepStr: "21",
                artifactNumToKeepStr: "50"
            )
        )
    disableConcurrentBuilds()
    }

    triggers {
        githubPush() // Trigger by push to respective github branch
        pollSCM 'H/30 * * * *' // Fallback polling solution as some pushes are somehow lost
    }

    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        BRANCH_NAME = "${env.BRANCH_NAME}"

        // DPCPP
        DPCPP_PATH = "${env.WORKSPACE}/llvm/build"
        DPCPP_FORCE_REBUILD = "TRUE"

        // hipSYCL
        HIPSYCL_PATH = "${env.WORKSPACE}/hipsycl-install"
        HIPSYCL_FORCE_REBUILD = "TRUE"
    }

    stages {
        stage('Init') {
            steps {
                dir('plssvm') {
                    sh '''
                        gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                        curl --verbose \
                             --request POST \
                             --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                             --header "Content-Type: application/json" \
                             --header "authorization: Bearer ${gitlab_token}" \
                             --data "{
                                \\"state\\": \\"pending\\",
                                \\"context\\": \\"Jenkins NVIDIA GPU tests\\",
                                \\"description\\": \\"Jenkins CI Job: Jenkins NVIDIA GPU tests\\",
                                \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Github-GPU_NVIDIA/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                        }"
                    '''
                }
            }
        }
        stage('Checkout PLSSVM') {
            steps {
                dir('plssvm') {
                    checkout scm
                }
            }
        }
        stage('Setup Python Dependencies'){
            steps{
                sh '''
                    python3 -m pip install --user -r install/python_requirements.txt
                '''
            }
        }

        stage('Install Ninja and CMake') {
            steps{
                sh '''
                    # download Ninja
                    if [ ! -f ninja ]; then
                        wget https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-linux.zip
                        unzip ninja-linux.zip
                        rm ninja-linux.zip*
                    fi

                    # download CMake
                    if [ ! -d cmake-3.24.1-linux-x86_64 ]; then
                        wget https://github.com/Kitware/CMake/releases/download/v3.24.1/cmake-3.24.1-linux-x86_64.tar.gz
                        tar xvzf cmake-3.24.1-linux-x86_64.tar.gz
                        rm cmake-3.24.1-linux-x86_64.tar.gz*
                    fi
                '''
                script{
                    env.PATH="$WORKSPACE:$PATH"
                    env.PATH="$WORKSPACE/cmake-3.24.1-linux-x86_64/bin:$PATH"
                }
            }
        }

        stage('Build DPCPP') {
            steps{
                sh '''
                    module load cuda/11.2.2
		            if [ ! -d "$DPCPP_PATH" ] || [ "$DPCPP_FORCE_REBUILD" = "TRUE" ]; then
		                rm -rf llvm
                        git clone --dept 1 --branch sycl-nightly/20230109 https://github.com/intel/llvm.git llvm
                        cd llvm
                        python buildbot/configure.py --cuda --llvm-external-projects="clang-tools-extra,compiler-rt,openmp" --cmake-opt="-DENABLE_LIBOMPTARGET=OFF"
                        python buildbot/compile.py
                        cmake --build build -- omp
                        cmake --build build -- install

                        rm -rf "$HIPSYCL_PATH"
                    fi
                '''
                script{
                    env.PATH="$DPCPP_PATH/bin:$PATH"
                    env.PLSSVM_SYCL_DPCPP_INCLUDE_DIR="$DPCPP_PATH/install/include"
                    env.LIBRARY_PATH="$DPCPP_PATH/lib"
                    env.LD_LIBRARY_PATH="$DPCPP_PATH/lib:$env.LD_LIBRARY_PATH"
                    env.CPLUS_INCLUDE_PATH="$DPCPP_PATH/install/include/sycl:$DPCPP_PATH/install/include:$DPCPP_PATH/projects/openmp/runtime/src:$env.CPLUS_INCLUDE_PATH"
                }
            }
        }

        stage('Build hipSYCL') {
            steps{
                sh '''
                    module load cuda/11.2.2
		            if [ ! -d "$HIPSYCL_PATH" ] || [ "$HIPSYCL_FORCE_REBUILD" = "TRUE" ]; then
                        rm -rf hipSYCL
                        rm -rf "$HIPSYCL_PATH"

                        mkdir $HIPSYCL_PATH
                        git clone https://github.com/illuhad/hipSYCL.git hipSYCL
                        cd hipSYCL
                        git checkout 013ae9c28f3fb59a1774fcf32f323d012d8d39d4
                        mkdir build
                        cd build
                        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$HIPSYCL_PATH -DCMAKE_CXX_COMPILER=clang++ ..
                        make -j
                        make install
                        cd $WORKSPACE
                        rm -rf hipSYCL
                    fi
                '''
                script{
                    env.PATH="${HIPSYCL_PATH}/bin:${PATH}"
                    env.PLSSVM_SYCL_HIPSYCL_INCLUDE_DIR="${HIPSYCL_PATH}/include"
                    env.LD_LIBRARY_PATH="${HIPSYCL_PATH}/lib:${LD_LIBRARY_PATH}"
                }
            }
        }

        //
        // Release
        //

        stage('Build PLSSVM Release - CUDA') {
            steps {
                dir('plssvm') {
                    sh '''
                        module load cuda/11.2.2
                        mkdir -p build/Release_CUDA
                        cd build/Release_CUDA
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Release -DPLSSVM_TARGET_PLATFORMS="nvidia:sm_86" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=ON -DPLSSVM_ENABLE_HIP_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF ../../
                        make -j4
                    '''
                }
            }
        }
        stage('Run Tests Release - CUDA') {
            steps {
                dir('plssvm/build/Release_CUDA') {
                    warnError('Release tests failed!') {
                        sh '''
                            module load cuda/11.2.2
                            ctest --output-on-failure -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }

        stage('Build PLSSVM Release - OpenCL') {
            steps {
                dir('plssvm') {
                    sh '''
                        module load cuda/11.2.2
                        mkdir -p build/Release_OpenCL
                        cd build/Release_OpenCL
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Release -DPLSSVM_TARGET_PLATFORMS="nvidia:sm_86" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=ON ../../
                        make -j4
                    '''
                }
            }
        }
        stage('Run Tests Release - OpenCL') {
            steps {
                dir('plssvm/build/Release_OpenCL') {
                    warnError('Release tests failed!') {
                        sh '''
                            module load cuda/11.2.2
                            ctest --output-on-failure -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }

        stage('Build PLSSVM Release - hipSYCL') {
            steps {
                dir('plssvm') {
                    sh '''
                        module load cuda/11.2.2
                        mkdir -p build/Release_hipSYCL
                        cd build/Release_hipSYCL
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Release -DPLSSVM_TARGET_PLATFORMS="nvidia:sm_86" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=ON -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF ../../
                        make -j4
                    '''
                }
            }
        }
        stage('Run Tests Release - hipSYCL') {
            steps {
                dir('plssvm/build/Release_hipSYCL') {
                    warnError('Release tests failed!') {
                        sh '''
                            module load cuda/11.2.2
                            ctest --output-on-failure -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }

        stage('Build PLSSVM Release - DPC++') {
            steps {
                dir('plssvm') {
                    sh '''
                        module load cuda/11.2.2
                        mkdir -p build/Release_dpcpp
                        cd build/Release_dpcpp
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang++ -DPLSSVM_TARGET_PLATFORMS="nvidia:sm_86" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=ON -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_SYCL_BACKEND_PREFERRED_IMPLEMENTATION=dpcpp ../../
                        make -j4
                    '''
                }
            }
        }
        stage('Run Tests Release - DPC++') {
            steps {
                dir('plssvm/build/Release_dpcpp') {
                    warnError('Release tests failed!') {
                        sh '''
                            module load cuda/11.2.2
                            ctest --output-on-failure -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }

        // CUDA + OpenCL + hipSYCL + DPC++ backends simultaneously
        stage('Build PLSSVM Release - All Available') {
            steps {
                dir('plssvm') {
                    sh '''
                        module load cuda/11.2.2
                        mkdir -p build/Release
                        cd build/Release
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang++ -DPLSSVM_TARGET_PLATFORMS="nvidia:sm_86" -DPLSSVM_ENABLE_ASSERTS=ON -DOpenCL_INCLUDE_DIR=/import/sgs.local/scratch/breyerml/sycl/dpcpp/cuda/build/include/sycl -DOpenCL_LIBRARY=/import/sgs.local/scratch/breyerml/sycl/dpcpp/cuda/build/lib -DPLSSVM_SYCL_BACKEND_PREFERRED_IMPLEMENTATION=dpcpp -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=ON -DPLSSVM_ENABLE_CUDA_BACKEND=ON -DPLSSVM_ENABLE_HIP_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=ON -DPLSSVM_TEST_FILE_NUM_DATA_POINTS=500 -DPLSSVM_TEST_FILE_NUM_FEATURES=200 ../..
                        make -j4
                    '''
                }
            }
        }
        stage('Run Tests Release - All Available') {
            steps {
                dir('plssvm/build/Release') {
                    warnError('Release tests failed!') {
                        sh '''
                            module load cuda/11.2.2
                            ctest --output-on-failure -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }

        //
        // Debug
        //

        stage('Build PLSSVM Debug - CUDA') {
            steps {
                dir('plssvm') {
                    sh '''
                        module load cuda/11.2.2
                        mkdir -p build/Debug_CUDA
                        cd build/Debug_CUDA
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Debug -DPLSSVM_TARGET_PLATFORMS="nvidia:sm_86" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=ON -DPLSSVM_ENABLE_HIP_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_TEST_FILE_NUM_DATA_POINTS=100 -DPLSSVM_TEST_FILE_NUM_FEATURES=20 ../../
                        make -j4
                    '''
                }
            }
        }
        stage('Run Tests Debug - CUDA') {
            steps {
                dir('plssvm/build/Debug_CUDA') {
                    warnError('Debug tests failed!') {
                        sh '''
                            module load cuda/11.2.2
                            ctest --output-on-failure -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }

        stage('Build PLSSVM Debug - OpenCL') {
            steps {
                dir('plssvm') {
                    sh '''
                        module load cuda/11.2.2
                        mkdir -p build/Debug_OpenCL
                        cd build/Debug_OpenCL
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Debug -DPLSSVM_TARGET_PLATFORMS="nvidia:sm_86" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=ON -DPLSSVM_TEST_FILE_NUM_DATA_POINTS=100 -DPLSSVM_TEST_FILE_NUM_FEATURES=20 ../../
                        make -j4
                    '''
                }
            }
        }
        stage('Run Tests Debug - OpenCL') {
            steps {
                dir('plssvm/build/Debug_OpenCL') {
                    warnError('Debug tests failed!') {
                        sh '''
                            module load cuda/11.2.2
                            ctest --output-on-failure -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }

        stage('Build PLSSVM Debug - hipSYCL') {
            steps {
                dir('plssvm') {
                    sh '''
                        module load cuda/11.2.2
                        mkdir -p build/Debug_hipSYCL
                        cd build/Debug_hipSYCL
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Debug -DPLSSVM_TARGET_PLATFORMS="nvidia:sm_86" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=ON -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_TEST_FILE_NUM_DATA_POINTS=100 -DPLSSVM_TEST_FILE_NUM_FEATURES=20 ../../
                        make -j4
                    '''
                }
            }
        }
        stage('Run Tests Debug - hipSYCL') {
            steps {
                dir('plssvm/build/Debug_hipSYCL') {
                    warnError('Debug tests failed!') {
                        sh '''
                            module load cuda/11.2.2
                            ctest --output-on-failure -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }

/*
        // causes a DPC++ (LLVM) internal Segmentation Fault
        stage('Build PLSSVM Debug - DPC++') {
            steps {
                dir('plssvm') {
                    sh '''
                        module load cuda/11.2.2
                        mkdir -p build/Debug_dpcpp
                        cd build/Debug_dpcpp
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER=clang++ -DPLSSVM_TARGET_PLATFORMS="nvidia:sm_86" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=ON -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_SYCL_BACKEND_PREFERRED_IMPLEMENTATION=dpcpp ../../
                        make -j4
                    '''
                }
            }
        }
        stage('Run Tests Debug - DPC++') {
            steps {
                dir('plssvm/build/Debug_dpcpp') {
                    warnError('Debug tests failed!') {
                        sh '''
                            module load cuda/11.2.2
                            ctest --output-on-failure -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }
*/
    }

    post {
        always {
            // Process the CTest xml output with the xUnit plugin
            xunit (
                testTimeMargin: '3000',
                thresholdMode: 1,
                thresholds: [
                    failed(failureThreshold: '0')
                ],
                tools: [CTest(
                    pattern: 'plssvm/build/*/Testing/**/*.xml',
                    deleteOutputFiles: true,
                    failIfNotNew: false,
                    skipNoTestFiles: true,
                    stopProcessingIfError: true
                )]
            )
        }
        success {
            script {
                buildbadge.setStatus('success')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                     --request POST \
                     --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                     --header "Content-Type: application/json" \
                     --header "authorization: Bearer ${gitlab_token}" \
                     --data "{
                        \\"state\\": \\"success\\",
                        \\"context\\": \\"Jenkins NVIDIA GPU tests\\",
                        \\"description\\": \\"Jenkins CI Job: Jenkins NVIDIA GPU tests\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Github-GPU_NVIDIA/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
        failure {
            script {
                buildbadge.setStatus('failing')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                     --request POST \
                     --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                     --header "Content-Type: application/json" \
                     --header "authorization: Bearer ${gitlab_token}" \
                     --data "{
                        \\"state\\": \\"failure\\",
                        \\"context\\": \\"Jenkins NVIDIA GPU tests\\",
                        \\"description\\": \\"Jenkins CI Job: Jenkins NVIDIA GPU tests\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Github-GPU_NVIDIA/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
        aborted {
            script {
                buildbadge.setStatus('aborted')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                     --request POST \
                     --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                     --header "Content-Type: application/json" \
                     --header "authorization: Bearer ${gitlab_token}" \
                     --data "{
                        \\"state\\": \\"error\\",
                        \\"context\\": \\"Jenkins NVIDIA GPU tests\\",
                        \\"description\\": \\"Jenkins CI Job: Jenkins NVIDIA GPU tests\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Github-GPU_NVIDIA/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
    }
}