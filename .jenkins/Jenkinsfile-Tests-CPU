#!groovy

def buildbadge = addEmbeddableBadgeConfiguration(id: "Jenkins", subject: "Jenkins Tests", status: "skipped")

def POCL_DIR

if (currentBuild.getBuildCauses().toString().contains('BranchIndexingCause')) {
    print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} triggered by branch indexing..."
    if (env.BRANCH_NAME != "master") {
        if (env.BUILD_NUMBER != "1") { // Always execute first build to load this configuration and thus the triggers
            print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} skipped due being triggered by Branch Indexing instead of SCM change!"
            buildbadge.setStatus('skipped')
            currentBuild.result = 'ABORTED'
            return // early exit to avoid redundant builds
        }
    }
} else {
    print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} triggered by SCM change..."
    print "Proceeding!"
}

pipeline {
    agent { label 'pcsgs02 || pcsgs03 || pcsgs04 || pcsgs05' }

    options {
        buildDiscarder(
            logRotator(
                daysToKeepStr: "21",
                numToKeepStr: "50",
                artifactDaysToKeepStr: "21",
                artifactNumToKeepStr: "50"
            )
        )
    disableConcurrentBuilds()
    }

    triggers {
        githubPush() // Trigger by push to respective github branch
        pollSCM 'H/30 * * * *' // Fallback polling solution as some pushes are somehow lost
    }

    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        BRANCH_NAME = "${env.BRANCH_NAME}"
        WORKSPACE= "${env.WORKSPACE}"

        // DPCPP
        DPCPP_PATH = "${env.WORKSPACE}/llvm/build"
        DPCPP_FORCE_REBUILD = "FALSE"

        // Open SYCL
        OPENSYCL_PATH = "${env.WORKSPACE}/opensycl-install"
        OPENSYCL_FORCE_REBUILD = "FALSE"

        // install path
        MAKE_INSTALL_PATH = "${env.WORKSPACE}/plssvm_install"
        MAKE_INSTALL_LIBRARY_SAMPLE_REBUILD = "FALSE"
    }

    stages {
        stage('Pending') {
            steps {
                dir('plssvm') {
                    sh '''
                        gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                        curl --verbose\
                             --request POST \
                             --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                             --header "Content-Type: application/json" \
                             --header "authorization: Bearer ${gitlab_token}" \
                             --data "{
                                \\"state\\": \\"pending\\",
                                \\"context\\": \\"Jenkins CPU tests\\",
                                \\"description\\": \\"Jenkins CI Job: Jenkins CPU tests\\",
                                \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Github-CPU/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                        }"
                    '''
                }
            }
        }

        stage('Checkout PLSSVM') {
            steps {
                dir('plssvm') {
                    checkout scm
                }
            }
        }

        stage('Create Library Sample') {
            steps {
                sh '''
                    # create library sample if one doesn't already exist
                    if [ ! -d "$MAKE_INSTALL_PATH/library_sample" ] || [ "$MAKE_INSTALL_LIBRARY_SAMPLE_REBUILD" = "TRUE" ]; then
                        mkdir -p $MAKE_INSTALL_PATH/library_sample
                        cd $MAKE_INSTALL_PATH/library_sample
                        rm -rf *

                        # create CMakeLists.txt file
                        touch CMakeLists.txt
                        echo "cmake_minimum_required(VERSION 3.1...3.21)" >> CMakeLists.txt
                        echo "project(ModernCMakeExample VERSION 1.0 LANGUAGES CXX)" >> CMakeLists.txt
                        echo "find_package(plssvm CONFIG REQUIRED)" >> CMakeLists.txt
                        echo "add_executable(prog main.cpp)" >> CMakeLists.txt
                        echo "target_compile_features(prog PUBLIC cxx_std_17)" >> CMakeLists.txt
                        echo "target_link_libraries(prog PUBLIC plssvm::plssvm-all)" >> CMakeLists.txt

                        # create main file
                        touch main.cpp
                        echo "#include <plssvm/core.hpp>" >> main.cpp
                        echo "#include <exception>" >> main.cpp
                        echo "#include <iostream>" >> main.cpp
                        echo "#include <vector>" >> main.cpp
                        echo "int main(int argc, char** argv) {" >> main.cpp
                        echo "  try {" >> main.cpp
                        echo "    const plssvm::parameter params{ plssvm::kernel_type = plssvm::kernel_function_type::polynomial };" >> main.cpp
                        echo "    const plssvm::data_set<double> train_data{ argv[1], { -1.0, 1.0 } };" >> main.cpp
                        echo "    const plssvm::data_set<double> test_data{ argv[1], train_data.scaling_factors()->get() };" >> main.cpp
                        echo "    const auto svm = plssvm::make_csvm();" >> main.cpp
                        echo "    const plssvm::model model = svm->fit(train_data, plssvm::epsilon = 10e-6);" >> main.cpp
                        echo "    const double model_accuracy = svm->score(model);" >> main.cpp
                        echo "    const std::vector<int> label = svm->predict(model, test_data);" >> main.cpp
                        echo "  } catch (const plssvm::exception &e) {" >> main.cpp
                        echo "    std::cerr << e.what_with_loc() << std::endl;" >> main.cpp
                        echo "  } catch (const std::exception &e) {" >> main.cpp
                        echo "    std::cerr << e.what() << std::endl;" >> main.cpp
                        echo "  }" >> main.cpp
                        echo "  return 0;" >> main.cpp
                        echo "}" >> main.cpp
                    fi
                '''
            }
        }

        stage('Installing Dependencies') {
            stages {
                stage('Dependency - Python packages') {
                    steps {
                        sh '''
                            python3 -m pip install --user -r install/python_requirements.txt
                        '''
                    }
                }
                stage('Dependency - Ninja') {
                    steps {
                        sh '''
                            if [ ! -f ninja ]; then
                                wget https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-linux.zip
                                unzip ninja-linux.zip
                                rm ninja-linux.zip*
                            fi
                        '''
                    }
                }
                stage('Dependency - CMake') {
                    steps {
                        sh '''
                            if [ ! -d cmake-3.24.1-linux-x86_64 ]; then
                                wget https://github.com/Kitware/CMake/releases/download/v3.24.1/cmake-3.24.1-linux-x86_64.tar.gz
                                tar xvzf cmake-3.24.1-linux-x86_64.tar.gz
                                rm cmake-3.24.1-linux-x86_64.tar.gz*
                            fi
                        '''
                    }
                }
                stage('Dependency - DPC++') {
                    environment {
                        PATH="$WORKSPACE:$WORKSPACE/cmake-3.24.1-linux-x86_64/bin:${env.PATH}"
                    }
                    steps {
                        sh '''
                            if [ ! -d "$DPCPP_PATH" ] || [ "$DPCPP_FORCE_REBUILD" = "TRUE" ]; then
                                rm -rf llvm
                                git clone --dept 1 --branch  sycl-nightly/20230110 https://github.com/intel/llvm.git llvm
                                cd llvm
                                python buildbot/configure.py --llvm-external-projects="clang-tools-extra,compiler-rt,openmp" --cmake-opt="-DENABLE_LIBOMPTARGET=OFF"
                                python buildbot/compile.py
                                cmake --build build -- omp
                                cmake --build build -- install

                                rm -rf "$OPENSYCL_PATH"
                            fi
                        '''
                    }
                }
                stage('Dependency - Open SYCL') {
                    environment {
                        PATH="$WORKSPACE/cmake-3.24.1-linux-x86_64/bin:$DPCPP_PATH/bin:${env.PATH}"
                        LIBRARY_PATH="$DPCPP_PATH/lib:${env.LIBRARY_PATH}"
                        LD_LIBRARY_PATH="$DPCPP_PATH/lib:${env.LD_LIBRARY_PATH}"
                        CPLUS_INCLUDE_PATH="$DPCPP_PATH/install/include/sycl:$DPCPP_PATH/install/include:$DPCPP_PATH/projects/openmp/runtime/src:${env.CPLUS_INCLUDE_PATH}"
                    }
                    steps {
                        sh '''
                            if [ ! -d "$OPENSYCL_PATH" ] || [ "$OPENSYCL_FORCE_REBUILD" = "TRUE" ]; then
                                rm -rf OpenSYCL
                                rm -rf "$OPENSYCL_PATH"

                                git clone https://github.com/OpenSYCL/OpenSYCL OpenSYCL
                                cd OpenSYCL
                                git checkout eb67fc46d6732b5c4f137ce5564f6adfba57eaa1
                                mkdir build
                                cd build
                                cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$OPENSYCL_PATH -DCMAKE_CXX_COMPILER=clang++ -DWITH_ACCELERATED_CPU=ON ..
                                make -j
                                make install
                                cd $WORKSPACE
                                rm -rf OpenSYCL
                            fi
                        '''
                    }
                }
                stage('Dependency - spack') {
                    steps {
                        sh '''
                            if [ ! -d "spack" ]; then
                                git clone https://github.com/spack/spack.git || true
                            fi

                            # clean spack cache
                            source spack/share/spack/setup-env.sh
                            spack clean -ab
                            spack clean -fmps
                        '''
                    }
                }
                stage('Dependency - PoCL') {
                    environment {
                        CXX="g++"
                        CC="gcc"
                    }
                    stages {
                        stage('PoCL - install') {
                            steps {
                                sh '''
                                    source spack/share/spack/setup-env.sh
                                    spack install --no-checksum "pocl@3.1%gcc@9.4.0 +distro ^llvm~gold"
                                '''
                            }
                        }
                        stage('PoCL - environment') {
                            steps {
                                script {
                                    POCL_DIR = sh(script: "source spack/share/spack/setup-env.sh && spack location -i pocl@3.1", returnStdout: true)
                                    println("POCL_DIR = ${POCL_DIR}")
                                }
                            }
                        }
                    }
                }
            }
        }


        stage('OpenMP') {
            environment {
                PATH="$WORKSPACE/cmake-3.24.1-linux-x86_64/bin:${env.PATH}"
            }
            parallel {

                stage('OpenMP - Release') {
                    stages {
                        stage('OpenMP - Release - build') {
                            steps {
                                dir('plssvm') {
                                    sh '''
                                        mkdir -p build/Release_OpenMP
                                        cd build/Release_OpenMP
                                        rm -rf *
                                        rm -rf $MAKE_INSTALL_PATH/OpenMP
                                        cmake -DCMAKE_INSTALL_PREFIX=$MAKE_INSTALL_PATH/OpenMP -DCMAKE_BUILD_TYPE=Release -DPLSSVM_TARGET_PLATFORMS="cpu" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=ON -DPLSSVM_ENABLE_SYCL_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF ../../
                                        make -j4 install
                                    '''
                                }
                            }
                        }
                        stage('OpenMP - Release - test') {
                            steps {
                                dir('plssvm/build/Release_OpenMP') {
                                    warnError('Release tests failed!') {
                                        sh '''
                                            ctest --output-on-failure -j4 --no-compress-output -T Test
                                        '''
                                    }
                                }
                            }
                        }
                        stage('OpenMP - Release - install') {
                            environment {
                                PATH="$MAKE_INSTALL_PATH/OpenMP/bin:${PATH}"
                                LD_LIBRARY_PATH="$MAKE_INSTALL_PATH/OpenMP/lib:${LD_LIBRARY_PATH}"
                                CPLUS_INCLUDE_PATH="$MAKE_INSTALL_PATH/OpenMP/include:${CPLUS_INCLUDE_PATH}"
                                CMAKE_PREFIX_PATH="$MAKE_INSTALL_PATH/OpenMP/share/plssvm/cmake:${CMAKE_PREFIX_PATH}"
                            }
                            steps {
                                dir('plssvm/build/Release_OpenMP') {
                                    warnError('Make install tests failed!') {
                                        sh '''
                                            # installed executable
                                            plssvm-scale -l -1.0 -u 1.0 ../../tests/data/libsvm/5x4.libsvm scaled_5x4.libsvm
                                            plssvm-train --backend openmp scaled_5x4.libsvm
                                            plssvm-predict --backend openmp scaled_5x4.libsvm scaled_5x4.libsvm.model

                                            # library version
                                            mkdir install_test
                                            cd install_test
                                            cmake -DCMAKE_BUILD_TYPE=Release $MAKE_INSTALL_PATH/library_sample
                                            make -j4
                                            ./prog ../../tests/data/libsvm/5x4.libsvm
                                        '''
                                    }
                                }
                            }
                        }
                    }
                } // end OpenMP Release

                stage('OpenMP - Debug') {
                    stages {
                        stage('OpenMP - Debug - build') {
                            steps {
                                dir('plssvm') {
                                    sh '''
                                        mkdir -p build/Debug_OpenMP
                                        cd build/Debug_OpenMP
                                        rm -rf *
                                        cmake -DCMAKE_BUILD_TYPE=Debug -DPLSSVM_TARGET_PLATFORMS="cpu" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=ON -DPLSSVM_ENABLE_SYCL_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF -DPLSSVM_TEST_FILE_NUM_DATA_POINTS=500 -DPLSSVM_TEST_FILE_NUM_FEATURES=100 ../../
                                        make -j4
                                    '''
                                }
                            }
                        }
                        stage('OpenMP - Debug - test') {
                            steps {
                                dir('plssvm/build/Debug_OpenMP') {
                                    warnError('Debug tests failed!') {
                                        sh '''
                                            ctest --output-on-failure -j4 --no-compress-output -T Test
                                        '''
                                    }
                                }
                            }
                        }
                    }
                } // end OpenMP Debug

            } // end OpenMP parallel
        } // end OpenMP


        stage('OpenCL') {
            environment {
                PATH="$WORKSPACE/cmake-3.24.1-linux-x86_64/bin:$POCL_DIR/bin:${env.PATH}"
                CPLUS_INCLUDE_PATH="$POCL_DIR/include:${env.CPLUS_INCLUDE_PATH}"
                LIBRARY_PATH="$POCL_DIR/lib:${env.LIBRARY_PATH}"
                LD_LIBRARY_PATH="$POCL_DIR/lib:${env.LD_LIBRARY_PATH}"
                CMAKE_PREFIX_PATH="$POCL_DIR:${env.CMAKE_PREFIX_PATH}"
            }
            parallel {

                stage('OpenCL - Release') {
                    stages {
                        stage('OpenCL - Release - build') {
                            steps {
                                dir('plssvm') {
                                    sh '''
                                        mkdir -p build/Release_OpenCL
                                        cd build/Release_OpenCL
                                        rm -rf *
                                        rm -rf $MAKE_INSTALL_PATH/OpenCL
                                        cmake -DCMAKE_INSTALL_PREFIX=$MAKE_INSTALL_PATH/OpenCL -DCMAKE_BUILD_TYPE=Release -DPLSSVM_TARGET_PLATFORMS="cpu" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=ON -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF ../../
                                        make -j4 install
                                    '''
                                }
                            }
                        }
                        stage('OpenCL - Release - test') {
                            steps {
                                dir('plssvm/build/Release_OpenCL') {
                                    warnError('Release tests failed!') {
                                        sh '''
                                            ctest --output-on-failure -j4 --no-compress-output -T Test
                                        '''
                                    }
                                }
                            }
                        }
                        stage('OpenCL - Release - install') {
                            environment {
                                PATH="$MAKE_INSTALL_PATH/OpenCL/bin:${PATH}"
                                LD_LIBRARY_PATH="$MAKE_INSTALL_PATH/OpenCL/lib:${LD_LIBRARY_PATH}"
                                CPLUS_INCLUDE_PATH="$MAKE_INSTALL_PATH/OpenCL/include:${CPLUS_INCLUDE_PATH}"
                                CMAKE_PREFIX_PATH="$MAKE_INSTALL_PATH/OpenCL/share/plssvm/cmake:${CMAKE_PREFIX_PATH}"
                            }
                            steps {
                                dir('plssvm/build/Release_OpenCL') {
                                    warnError('Make install tests failed!') {
                                        sh '''
                                            # installed executable
                                            plssvm-scale -l -1.0 -u 1.0 ../../tests/data/libsvm/5x4.libsvm scaled_5x4.libsvm
                                            plssvm-train --backend opencl scaled_5x4.libsvm
                                            plssvm-predict --backend opencl scaled_5x4.libsvm scaled_5x4.libsvm.model

                                            # library version
                                            mkdir install_test
                                            cd install_test
                                            cmake -DCMAKE_BUILD_TYPE=Release $MAKE_INSTALL_PATH/library_sample
                                            make -j4
                                            ./prog ../../tests/data/libsvm/5x4.libsvm
                                        '''
                                    }
                                }
                            }
                        }
                    }
                } // end OpenCL Release

                stage('OpenCL - Debug') {
                    stages {
                        stage('OpenCL - Debug - build') {
                            steps {
                                dir('plssvm') {
                                    sh '''
                                        mkdir -p build/Debug_OpenCL
                                        cd build/Debug_OpenCL
                                        rm -rf *
                                        cmake -DCMAKE_BUILD_TYPE=Debug -DPLSSVM_TARGET_PLATFORMS="cpu" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=ON -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF -DPLSSVM_TEST_FILE_NUM_DATA_POINTS=500 -DPLSSVM_TEST_FILE_NUM_FEATURES=100 ../../
                                        make -j4
                                    '''
                                }
                            }
                        }
                        stage('OpenCL - Debug - test') {
                            steps {
                                dir('plssvm/build/Debug_OpenCL') {
                                    warnError('Debug tests failed!') {
                                        sh '''
                                            ctest --output-on-failure -j4 --no-compress-output -T Test
                                        '''
                                    }
                                }
                            }
                        }
                    }
                } // end OpenCL Debug

            } // end OpenCL parallel
        } // end OpenCL


        stage('Open SYCL') {
            environment {
                PATH="$WORKSPACE/cmake-3.24.1-linux-x86_64/bin:$OPENSYCL_PATH/bin:${env.PATH}"
                LD_LIBRARY_PATH="$DPCPP_PATH/lib:$OPENSYCL_PATH/lib:${env.LD_LIBRARY_PATH}"
                CPLUS_INCLUDE_PATH="$DPCPP_PATH/projects/openmp/runtime/src:${env.CPLUS_INCLUDE_PATH}"
            }
            parallel {

                stage('Open SYCL - Release') {
                    stages {
                        stage('Open SYCL - Release - build') {
                            steps {
                                dir('plssvm') {
                                    sh '''
                                        mkdir -p build/Release_OpenSYCL
                                        cd build/Release_OpenSYCL
                                        rm -rf *
                                        rm -rf $MAKE_INSTALL_PATH/OpenSYCL
                                        cmake -DCMAKE_INSTALL_PREFIX=$MAKE_INSTALL_PATH/OpenSYCL -DCMAKE_BUILD_TYPE=Release -DPLSSVM_TARGET_PLATFORMS="cpu" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=ON -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF ../../
                                        make -j4 install
                                    '''
                                }
                            }
                        }
                        stage('Open SYCL - Release - test') {
                            steps {
                                dir('plssvm/build/Release_OpenSYCL') {
                                    warnError('Release tests failed!') {
                                        sh '''
                                            ctest --output-on-failure -j4 --no-compress-output -T Test
                                        '''
                                    }
                                }
                            }
                        }
                        stage('OpenSYCL - Release - install') {
                            environment {
                                PATH="$MAKE_INSTALL_PATH/OpenSYCL/bin:${PATH}"
                                LD_LIBRARY_PATH="$MAKE_INSTALL_PATH/OpenSYCL/lib:${LD_LIBRARY_PATH}"
                                CPLUS_INCLUDE_PATH="$MAKE_INSTALL_PATH/OpenSYCL/include:${CPLUS_INCLUDE_PATH}"
                                CMAKE_PREFIX_PATH="$MAKE_INSTALL_PATH/OpenSYCL/share/plssvm/cmake:${CMAKE_PREFIX_PATH}"
                            }
                            steps {
                                dir('plssvm/build/Release_OpenSYCL') {
                                    warnError('Make install tests failed!') {
                                        sh '''
                                            # installed executable
                                            plssvm-scale -l -1.0 -u 1.0 ../../tests/data/libsvm/5x4.libsvm scaled_5x4.libsvm
                                            plssvm-train --backend sycl --sycl_implementation_type opensycl scaled_5x4.libsvm
                                            plssvm-predict --backend sycl --sycl_implementation_type opensycl scaled_5x4.libsvm scaled_5x4.libsvm.model

                                            # library version
                                            mkdir install_test
                                            cd install_test
                                            cmake -DCMAKE_BUILD_TYPE=Release $MAKE_INSTALL_PATH/library_sample
                                            make -j4
                                            ./prog ../../tests/data/libsvm/5x4.libsvm
                                        '''
                                    }
                                }
                            }
                        }
                    }
                } // end Open SYCL Release

                stage('Open SYCL - Debug') {
                    stages {
                        stage('Open SYCL - Debug - build') {
                            steps {
                                dir('plssvm') {
                                    sh '''
                                        mkdir -p build/Debug_OpenSYCL
                                        cd build/Debug_OpenSYCL
                                        rm -rf *
                                        cmake -DCMAKE_BUILD_TYPE=Debug -DPLSSVM_TARGET_PLATFORMS="cpu" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=ON -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF -DPLSSVM_TEST_FILE_NUM_DATA_POINTS=100 -DPLSSVM_TEST_FILE_NUM_FEATURES=20 ../../
                                        make -j4
                                    '''
                                }
                            }
                        }
                        stage('Open SYCL - Debug - test') {
                            steps {
                                dir('plssvm/build/Debug_OpenSYCL') {
                                    warnError('Release tests failed!') {
                                        sh '''
                                            ctest --output-on-failure -j4 --no-compress-output -T Test
                                        '''
                                    }
                                }
                            }
                        }
                    }
                } // end Open SYCL Debug

            } // end Open SYCL parallel
        } // end Open SYCL


        // TODO: enable DPC++ on CPUs in Release and Debug mode (missing OpenCL CPU runtime)

        // OpenMP + OpenCL + Open SYCL backends simultaneously
        stage('All Available') {
            environment {
                PATH="$WORKSPACE/cmake-3.24.1-linux-x86_64/bin:$OPENSYCL_PATH/bin:$POCL_DIR/bin:${env.PATH}"
                LIBRARY_PATH="$POCL_DIR/lib:${env.LIBRARY_PATH}"
                LD_LIBRARY_PATH="$DPCPP_PATH/lib:$OPENSYCL_PATH/lib:$POCL_DIR/lib:${env.LD_LIBRARY_PATH}"
                CPLUS_INCLUDE_PATH="$DPCPP_PATH/projects/openmp/runtime/src:$POCL_DIR/include:${env.CPLUS_INCLUDE_PATH}"
                CMAKE_PREFIX_PATH="$POCL_DIR:${env.CMAKE_PREFIX_PATH}"
                PLSSVM_SYCL_DPCPP_INCLUDE_DIR="$DPCPP_PATH/install/include"
                PLSSVM_SYCL_OPENSYCL_INCLUDE_DIR="${OPENSYCL_PATH}/include"
            }
            stages {
                stage('All Available - Release - build') {
                    steps {
                        dir('plssvm') {
                            sh '''
                                mkdir -p build/Release
                                cd build/Release
                                rm -rf *
                                rm -rf $MAKE_INSTALL_PATH/All
                                cmake -DCMAKE_INSTALL_PREFIX=$MAKE_INSTALL_PATH/All -DCMAKE_BUILD_TYPE=Release -DPLSSVM_TARGET_PLATFORMS="cpu" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=ON -DPLSSVM_ENABLE_SYCL_BACKEND=ON -DPLSSVM_ENABLE_OPENCL_BACKEND=ON -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF ../../
                                make -j4 install
                            '''
                        }
                    }
                }
                stage('All Available - Release - test') {
                    steps {
                        dir('plssvm/build/Release') {
                            warnError('Release tests failed!') {
                                sh '''
                                    ctest --output-on-failure -j4 --no-compress-output -T Test
                                '''
                            }
                        }
                    }
                }
                stage('All Available - Release - install') {
                    environment {
                        PATH="$MAKE_INSTALL_PATH/All/bin:${PATH}"
                        LD_LIBRARY_PATH="$MAKE_INSTALL_PATH/All/lib:${LD_LIBRARY_PATH}"
                        CPLUS_INCLUDE_PATH="$MAKE_INSTALL_PATH/All/include:${CPLUS_INCLUDE_PATH}"
                        CMAKE_PREFIX_PATH="$MAKE_INSTALL_PATH/All/share/plssvm/cmake:${CMAKE_PREFIX_PATH}"
                    }
                    steps {
                        dir('plssvm/build/Release') {
                            warnError('Make install tests failed!') {
                                sh '''
                                    # installed executable
                                    plssvm-scale -l -1.0 -u 1.0 ../../tests/data/libsvm/5x4.libsvm scaled_5x4.libsvm
                                    plssvm-train scaled_5x4.libsvm
                                    plssvm-predict scaled_5x4.libsvm scaled_5x4.libsvm.model

                                    # library version
                                    mkdir install_test
                                    cd install_test
                                    cmake -DCMAKE_BUILD_TYPE=Release $MAKE_INSTALL_PATH/library_sample
                                    make -j4
                                    ./prog ../../tests/data/libsvm/5x4.libsvm
                                '''
                            }
                        }
                    }
                }
            }
        } // end All Available


        stage('Coverage Analysis') {
            environment {
                PATH="$WORKSPACE/cmake-3.24.1-linux-x86_64/bin:$OPENSYCL_PATH/bin:$POCL_DIR/bin:${env.PATH}"
                LIBRARY_PATH="$POCL_DIR/lib:${env.LIBRARY_PATH}"
                LD_LIBRARY_PATH="$DPCPP_PATH/lib:$OPENSYCL_PATH/lib:$POCL_DIR/lib:${env.LD_LIBRARY_PATH}"
                CPLUS_INCLUDE_PATH="$DPCPP_PATH/projects/openmp/runtime/src:$POCL_DIR/include:${env.CPLUS_INCLUDE_PATH}"
                CMAKE_PREFIX_PATH="$POCL_DIR:${env.CMAKE_PREFIX_PATH}"
                PLSSVM_SYCL_DPCPP_INCLUDE_DIR="$DPCPP_PATH/install/include"
                PLSSVM_SYCL_OPENSYCL_INCLUDE_DIR="${OPENSYCL_PATH}/include"
            }
            steps {
                dir('plssvm') {
                    sh '''
                        mkdir -p build/Debug_cov
                        cd build/Debug_cov
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Coverage -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CC_COMPILER=gcc -DPLSSVM_TARGET_PLATFORMS="cpu" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_TEST_FILE_NUM_DATA_POINTS=500 -DPLSSVM_TEST_FILE_NUM_FEATURES=100 ../../
                        make -j4 coverage
                        wget -N https://raw.githubusercontent.com/eriwen/lcov-to-cobertura-xml/master/lcov_cobertura/lcov_cobertura.py
                        python lcov_cobertura.py test_clean.info
                    '''
                    cobertura coberturaReportFile: 'build/Debug_cov/coverage.xml'
                }
            }
        } // end Coverage Analysis
    }

    post {
        always {
            // Process the CTest xml output with the xUnit plugin
            xunit (
                testTimeMargin: '3000',
                thresholdMode: 1,
                thresholds: [
                    failed(failureThreshold: '0')
                ],
                tools: [CTest(
                    pattern: 'plssvm/build/*/Testing/**/*.xml',
                    deleteOutputFiles: true,
                    failIfNotNew: false,
                    skipNoTestFiles: true,
                    stopProcessingIfError: true
                )]
            )
        }
        success {
            script {
                buildbadge.setStatus('success')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                     --request POST \
                     --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                     --header "Content-Type: application/json" \
                     --header "authorization: Bearer ${gitlab_token}" \
                     --data "{
                        \\"state\\": \\"success\\",
                        \\"context\\": \\"Jenkins CPU tests\\",
                        \\"description\\": \\"Jenkins CI Job: Jenkins CPU tests\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Github-CPU/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
        failure {
            script {
                buildbadge.setStatus('failing')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                     --request POST \
                     --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                     --header "Content-Type: application/json" \
                     --header "authorization: Bearer ${gitlab_token}" \
                     --data "{
                        \\"state\\": \\"failure\\",
                        \\"context\\": \\"Jenkins CPU tests\\",
                        \\"description\\": \\"Jenkins CI Job: Jenkins CPU tests\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Github-CPU/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
        aborted {
            script {
                buildbadge.setStatus('aborted')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                     --request POST \
                     --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                     --header "Content-Type: application/json" \
                     --header "authorization: Bearer ${gitlab_token}" \
                     --data "{
                        \\"state\\": \\"error\\",
                        \\"context\\": \\"Jenkins CPU tests\\",
                        \\"description\\": \\"Jenkins CI Job: Jenkins CPU tests\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Github-CPU/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
    }
}