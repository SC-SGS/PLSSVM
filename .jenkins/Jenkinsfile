#!groovy

def buildbadge = addEmbeddableBadgeConfiguration(id: "Jenkins", subject: "Jenkins Tests", status: "skipped")

if (currentBuild.getBuildCauses().toString().contains('BranchIndexingCause')) {
    print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} triggered by branch indexing..."
    if (env.BRANCH_NAME != "master") {
        if (env.BUILD_NUMBER != "1") { // Always execute first build to load this configuration and thus the triggers
            print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} skipped due being triggered by Branch Indexing instead of SCM change!"
            buildbadge.setStatus('skipped')
            currentBuild.result = 'ABORTED'
            return // early exit to avoid redundant builds
        }
    }
} else {
    print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} triggered by SCM change..."
    print "Proceeding!"
}

// @NonCPS
// def hostNames(label) {
//   def nodes = []
//   jenkins.model.Jenkins.get().computers.each { c ->
//     if (c.node.labelString.contains(label)) {
//       nodes.add(c.node.selfLabel.name)
//     }
//   }
//   return nodes
// }

// @NonCPS
def onlineNodes(label) {
    def nodes = []
    def onlineNodes = []
    for (node in  hudson.model.Hudson.instance.slaves) {
        if ( node.getComputer().isOnline().toString() == "true" && node.getLabelString().contains(label)) {
            onlineNodes.add(node.getDisplayName())
        }
    }
  return ['pcsgs02','pcsgs03','pcsgs04','pcsgs05','pcsgs13','pcsgs11',] //TODO fix
}

pipeline {
    agent { label 'sgs_workstation' }

    parameters{
    booleanParam(defaultValue: false, description: 'Update Spack to new version.', name: 'update_spack')
    }

    options {
        buildDiscarder(
            logRotator(
                daysToKeepStr: "21",
                numToKeepStr: "50",
                artifactDaysToKeepStr: "21",
                artifactNumToKeepStr: "50"
            )
        )
    disableConcurrentBuilds()
    }

    triggers {
        githubPush() // Trigger by push to respective github branch
        pollSCM 'H/30 * * * *' // Fallback polling solution as some pushes are somehow lost
    }

    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        BRANCH_NAME = "${env.BRANCH_NAME}"
        WORKSPACE= "${env.WORKSPACE}"

        // ROCM / HIP
        ROCM_PATH = "/opt/rocm"
        LD_LIBRARY_PATH = "${env.ROCM_PATH}/lib64:${env.ROCM_PATH}/lib:${env.ROCM_PATH}/opencl/lib/x86_64:${env.ROCM_PATH}/hsa/lib:${env.ROCM_PATH}/hip/lib:${env.LD_LIBRARY_PATH}"
        CPLUS_INCLUDE_PATH = "${env.ROCM_PATH}/hip/include:${env.CPLUS_INCLUDE_PATH}"
        CMAKE_PREFIX_PATH = "${env.ROCM_PATH}/hip:${env.ROCM_PATH}:${env.CMAKE_PREFIX_PATH}"

        SPACK_SYSTEM_CONFIG_PATH="/data/scratch/jenkines/spack"
        SGSSCRATCH="/import/sgs.scratch/jenkines/"


        // install path
        MAKE_INSTALL_PATH = "${env.WORKSPACE}/plssvm_install"
        MAKE_INSTALL_LIBRARY_SAMPLE_REBUILD = "FALSE"


    }

    stages{

        stage('Dependency -- Spack')
        {

        steps{
            script{

                def labels = onlineNodes('sgs_workstation')
                def builders = [: ]
                for (x in labels){
                    def label = x
                        builders[label] = {
                            node(label) {
                                sh '''
                                    hostname
                                    mkdir -p $SGSSCRATCH
                                    mkdir -p $SPACK_SYSTEM_CONFIG_PATH

                                    if [[ ! -d  "$SGSSCRATCH/spack" ]]; then
                                        cd $SGSSCRATCH
                                        git clone https://github.com/spack/spack.git spack || true
                                    elif [[ params.update_spack ]]; then
                                        cd $SGSSCRATCH/spack
                                        git checkout 594a376 || true
                                    fi
                                    source $SGSSCRATCH/spack/share/spack/setup-env.sh
                                    if [[ ! -d  "$SGSSCRATCH/PLSSVM-spack" ]]; then
                                        cd $SGSSCRATCH
                                        git clone git@github.com:vancraar/PLSSVM-spack.git PLSSVM-spack || true
                                        spack repo add $SGSSCRATCH/PLSSVM-spack || true
                                    else
                                        cd $SGSSCRATCH/PLSSVM-spack
                                        git pull || true
                                    fi

                                    if  [ ! -f $SPACK_SYSTEM_CONFIG_PATH/compilers.yaml ]; then
                                        # TODO: check for existance of cxx and CC Compilers
                                        spack compiler find --scope system || true
                                        # rm broken compiler
                                        spack compiler rm -a gcc@10.5.0
                                        spack external find --scope system || true
                                    fi

                                    if [[ -f ~/.spack/linux/compilers.yaml ]]; then
                                        rm ~/.spack/linux/compilers.yaml
                                    fi
                                    spack clean -a  || true

                                    if [ ! -f $SPACK_SYSTEM_CONFIG_PATH/config.yaml ]; then
                                        touch  $SPACK_SYSTEM_CONFIG_PATH/config.yaml
                                        echo "config:" >> $SPACK_SYSTEM_CONFIG_PATH/config.yaml
                                        echo "  install_tree:" >> $SPACK_SYSTEM_CONFIG_PATH/config.yaml
                                        echo "    root: $SGSSCRATCH/spack/opt/spack" >> $SPACK_SYSTEM_CONFIG_PATH/config.yaml
                                        echo "  build_jops: $(nproc)" >> $SPACK_SYSTEM_CONFIG_PATH/config.yaml
                                        echo "  build_stage:" >> $SPACK_SYSTEM_CONFIG_PATH/config.yaml
                                        echo "      - /data/scratch/jenkins/spack_tmp" >> $SPACK_SYSTEM_CONFIG_PATH/config.yaml
                                    fi

                                    spack uninstall -a -y plssvm@develop || true
                                '''


                            }

                        }
                    }
                    parallel builders
                }

            }
        }



        stage('Checkout PLSSVM') {
            steps {
              script{
                def onlineNodes = onlineNodes('sgs_workstation')
                def builders = [: ]
                for (x in onlineNodes){
                    def label = x
                        builders[label] = {
                            node(label) {
                              dir("${env.WORKSPACE}/plssvm") {
                               checkout scm
                               }
                               checkout scm

                          }

                      }

                  }
                parallel builders
                }
            }
        }
        stage('install python requirements') {
            steps {
              script{
                def labels = onlineNodes('sgs_workstation')
                def builders = [: ]
                for (x in labels){
                    def label = x
                        builders[label] = {
                            node(label) {
                              sh '''
                              hostname
                              cd ${WORKSPACE}/plssvm
                              python3 -m pip install --user -r  install/python_requirements.txt
                              '''
                          }
                      }

                  }
                parallel builders
                }
            }
        }


        stage('Build and Test'){

            matrix{
                axes {
                    axis {
                        name 'BACKEND'
                        values 'OPENMP', 'CUDA', 'OPENCL', 'DPCPP', 'ADAPTIVECPP', 'HIP', 'STDPAR-GNU-TBB', 'STDPAR-DPCPP', 'STDPAR-ADAPTIVECPP', 'STDPAR-NVHPC' //, 'STDPAR-ROC'
                    }
                    axis {
                        name 'ARCHITECTURE'
                        values 'NVIDIA', 'AMD', 'CPU'
                    }
                    axis {
                        name 'BUILD_TYPE'
                        values 'Release', 'Debug'
                    }
                    axis {
                        name 'TEST_TYPE'
                        values 'BASE', 'BACKEND'
                    }
                  }
                  excludes {
                    exclude {
                      axis{
                        name 'BACKEND'
                        values 'HIP'//, 'STDPAR-ROC'
                      }
                      axis{
                        name 'ARCHITECTURE'
                        notValues 'AMD'
                      }
                    }
                    exclude {
                      axis{
                        name 'BACKEND'
                        values 'CUDA', 'STDPAR-NVHPC'
                      }
                      axis{
                        name 'ARCHITECTURE'
                        notValues 'NVIDIA'
                      }
                    }
                    exclude {
                      axis{
                        name 'BACKEND'
                        values 'OPENMP', 'STDPAR-GNU-TBB'
                      }
                      axis{
                        name 'ARCHITECTURE'
                        notValues 'CPU'
                      }
                    }
                    // exclude {
                    //   axis{
                    //     name 'BACKEND'
                    //     values 'DPCPP'
                    //   }
                    //   axis{
                    //     name 'ARCHITECTURE'
                    //     values 'CPU'
                    //   }
                    // }
                    exclude {
                      axis{
                        name 'BACKEND'
                        values 'ADAPTIVECPP'
                      }
                      axis{
                        name 'BUILD_TYPE'
                        values 'Debug'
                      }
                    }
                    exclude {
                      axis{
                        name 'TEST_TYPE'
                        values 'BASE'
                      }
                      axis{
                        name 'ARCHITECTURE'
                        notValues 'CPU'
                      }
                    }
                    exclude {
                      axis{
                        name 'TEST_TYPE'
                        values 'BASE'
                      }
                      axis{
                        name 'BACKEND'
                        notValues 'OPENMP'
                      }
                    }
                  }


                def labels = onlineNodes('sgs_workstation')

                def label_list = []
                for (x in labels){
                    def label = x
                    label_list.add("${env.ARCHITECTURE.equalsIgnoreCase('AMD') ? 'amd' : 'sgs_nvidia_gpu_node'} &&  label")
                }


                agent { label "${label_list.join(' || ')}" }

                stages{
                    stage('Build PLSSVM'){
                        steps{
                                sh ''' #!/bin/bash
                                        hostname
                                        if [ "$BUILD_TYPE" == Release ]; then
                                            export NUM_DATA_POINTS=200
                                            export NUM_FEATURES=20
                                        else
                                            export NUM_DATA_POINTS=20
                                            export NUM_FEATURES=10
                                        fi

                                        source $SGSSCRATCH/spack/share/spack/setup-env.sh
                                        mkdir -p ${WORKSPACE}/plssvm
                                        cd ${WORKSPACE}/plssvm

                                        echo $(hostname)
                                        echo $(spack arch)

                                        case $BACKEND in
                                            OPENCL|ADAPTIVECPP|DPCPP|STDPAR-NVHPC|STDPAR-DPCPP|STDPAR-ADAPTIVECPP)
                                                if [ "$ARCHITECTURE" != NVIDIA ]; then
                                                    SET_NVIDIA_GPU_NONE=1
                                                fi
                                                ;;
                                            *) ;;
                                        esac

                                        case $BACKEND in
                                            OPENCL|ADAPTIVECPP|DPCPP|STDPAR-DPCPP|STDPAR-ADAPTIVECPP)
                                                if [ "$ARCHITECTURE" != AMD ]; then
                                                    SET_AMD_GPU_NONE=1
                                                fi
                                            ;;
                                            *) ;;
                                        esac



                                        spack uninstall -a -y plssvm@develop$([[ $BACKEND == ADAPTIVECPP ]] && echo "%clang" )  \
                                            $([[ $BACKEND == OPENMP ]] && echo "+openmp" || echo "~openmp") \
                                            $([[ $BACKEND == CUDA ]] && echo "+cuda" || echo "~cuda") \
                                            $([[ $BACKEND == HIP ]] && echo "+hip" || echo "~hip") \
                                            $([[ $BACKEND == OPENCL ]] && echo "+opencl" || echo "~opencl") \
                                            $([[ $BACKEND == ADAPTIVECPP ]] && echo "+adaptivecpp" || echo "~adaptivecpp") \
                                            $([[ $BACKEND == DPCPP ]] && echo "+icpx" || echo "~icpx") \
                                            $([[ $BACKEND == *"STDPAR"* ]] && echo "+stdpar" || echo "~stdpar") \
                                            $([[ $BACKEND == STDPAR-GNU-TBB ]] && echo "stdparimplementation=gnu-tbb" ) \
                                            $([[ $BACKEND == STDPAR-DPCPP ]] && echo "stdparimplementation=icpx" ) \
                                            $([[ $BACKEND == STDPAR-NVHPC ]] && echo "stdparimplementation=nvhpc" ) \
                                            $([[ $BACKEND == STDPAR-ADAPTIVECPP ]] && echo "stdparimplementation=adaptivecpp" ) \
                                            $([[ $BACKEND == STDPAR-ROC ]] && echo "stdparimplementation=roc" ) \
                                            $([[ $ARCHITECTURE == NVIDIA ]] && echo "cuda_arch=86") \
                                            $([[ SET_NVIDIA_GPU_NONE == 1 ]] && echo "cuda_arch=none") \
                                            $([[ $ARCHITECTURE == AMD ]] && echo "amdgpu_target=gfx90a") \
                                            $([[ SET_AMD_GPU_NONE == 1 ]] && echo "amdgpu_target=none") \
                                            build_type=$BUILD_TYPE \
                                            arch=$(spack arch) || true

                                        set -e -o pipefail
                                        spack dev-build plssvm@develop$([[ $BACKEND == ADAPTIVECPP ]] && echo "%clang" ) \
                                            $([[ $BACKEND == OPENMP ]] && echo "+openmp" || echo "~openmp") \
                                            $([[ $BACKEND == CUDA ]] && echo "+cuda" || echo "~cuda") \
                                            $([[ $BACKEND == HIP ]] && echo "+hip" || echo "~hip") \
                                            $([[ $BACKEND == OPENCL ]] && echo "+opencl" || echo "~opencl") \
                                            $([[ $BACKEND == ADAPTIVECPP ]] && echo "+adaptivecpp" || echo "~adaptivecpp") \
                                            $([[ $BACKEND == DPCPP ]] && echo "+icpx" || echo "~icpx") \
                                            $([[ $BACKEND == *"STDPAR"* ]] && echo "+stdpar" || echo "~stdpar") \
                                            $([[ $BACKEND == STDPAR-GNU-TBB ]] && echo "stdparimplementation=gnu-tbb" ) \
                                            $([[ $BACKEND == STDPAR-DPCPP ]] && echo "stdparimplementation=icpx" ) \
                                            $([[ $BACKEND == STDPAR-NVHPC ]] && echo "stdparimplementation=nvhpc" ) \
                                            $([[ $BACKEND == STDPAR-ADAPTIVECPP ]] && echo "stdparimplementation=adaptivecpp" ) \
                                            $([[ $BACKEND == STDPAR-ROC ]] && echo "stdparimplementation=roc" ) \
                                            $([[ $ARCHITECTURE == NVIDIA ]] && echo "cuda_arch=86") \
                                            $([[ SET_NVIDIA_GPU_NONE == 1 ]] && echo "cuda_arch=none") \
                                            $([[ $ARCHITECTURE == AMD ]] && echo "amdgpu_target=gfx90a") \
                                            $([[ SET_AMD_GPU_NONE == 1 ]] && "amdgpu_target=none") \
                                            +language_bindings \
                                            +test_file \
                                            test_file_num_classes=5 \
                                            test_file_num_data_points=$NUM_DATA_POINTS \
                                            test_file_num_features=$NUM_FEATURES \
                                            $([[ $BACKEND == *"STDPAR"* ]] && echo "~asserts" || echo "+asserts") \
                                            ~fast-math \
                                            arch=$(spack arch) \
                                            build_type=$BUILD_TYPE \
                                            +reducing_label_types \
                                            $([[ $BACKEND == ADAPTIVECPP ]] && echo "^py-scipy%gcc" ) \
                                            $([[ $BACKEND == ADAPTIVECPP ]] && echo "^openblas%gcc" ) \
                                            $([[ $BACKEND == ADAPTIVECPP ]] && echo "^llvm@17~gold~libomptarget") \
                                            | tee $(tty) | tail -n 1 | cut -d " " -f 2 > ${WORKSPACE}/plssvm/${BUILD_TYPE}-${BACKEND}-${ARCHITECTURE}-${TEST_TYPE}.installpath

                                        echo ${PIPESTATUS[@]}

                                        installpath=$(cat ${WORKSPACE}/plssvm/${BUILD_TYPE}-${BACKEND}-${ARCHITECTURE}-${TEST_TYPE}.installpath)

                                        echo "Install path: $installpath"
                                '''

                        }
                    }
                    stage('Ctest PLSSVM'){
                        steps{
                            sh ''' #!/bin/bash
                                hostname
                                source $SGSSCRATCH/spack/share/spack/setup-env.sh
                                echo $hostname

                                case $BACKEND in
                                    OPENCL|ADAPTIVECPP|DPCPP|STDPAR-NVHPC|STDPAR-DPCPP|STDPAR-ADAPTIVECPP)
                                        if [ "$ARCHITECTURE" != NVIDIA ]; then
                                            SET_NVIDIA_GPU_NONE=1
                                        fi
                                        ;;
                                    *) ;;
                                esac

                                case $BACKEND in
                                    OPENCL|ADAPTIVECPP|DPCPP|STDPAR-DPCPP|STDPAR-ADAPTIVECPP)
                                        if [ "$ARCHITECTURE" != AMD ]; then
                                            SET_AMD_GPU_NONE=1
                                        fi
                                    ;;
                                    *) ;;
                                esac

                                installpath=$(cat ${WORKSPACE}/plssvm/${BUILD_TYPE}-${BACKEND}-${ARCHITECTURE}-${TEST_TYPE}.installpath)

                                cd ${WORKSPACE}/plssvm
                                cd build-$(spack arch)-$(echo ${installpath##*-}| cut -c1-7)/spack-build-$(echo ${installpath##*-}| cut -c1-7)



                                if [[ $ARCHITECTURE == NVIDIA ]]; then
                                    export ONEAPI_DEVICE_SELECTOR=cuda:*
                                    export ACPP_VISIBILITY_MASK=cuda
                                    ONEAPI_DEVICE_SELECTOR=cuda:*
                                    ACPP_VISIBILITY_MASK=cuda
                                elif [[ $ARCHITECTURE == AMD ]]; then
                                    export ONEAPI_DEVICE_SELECTOR=hip:*
                                    export ACPP_VISIBILITY_MASK=hip
                                    ONEAPI_DEVICE_SELECTOR=hip:*
                                    ACPP_VISIBILITY_MASK=hip
                                else
                                    export ONEAPI_DEVICE_SELECTOR=*:cpu
                                    export ACPP_VISIBILITY_MASK=omp
                                    ONEAPI_DEVICE_SELECTOR=*:cpu
                                    ACPP_VISIBILITY_MASK=omp
                                fi

                                export ONEAPI_DEVICE_SELECTOR=${ONEAPI_DEVICE_SELECTOR}
                                export ACPP_VISIBILITY_MASK=${ACPP_VISIBILITY_MASK}
                                spack test-env --dirty "plssvm@develop$([[ $BACKEND == ADAPTIVECPP ]] && echo "%clang" ) \
$([[ $BACKEND == OPENMP ]] && echo "+openmp" || echo "~openmp") \
$([[ $BACKEND == CUDA ]] && echo "+cuda" || echo "~cuda") \
$([[ $BACKEND == HIP ]] && echo "+hip" || echo "~hip") \
$([[ $BACKEND == OPENCL ]] && echo "+opencl" || echo "~opencl") \
$([[ $BACKEND == ADAPTIVECPP ]] && echo " +adaptivecpp" || echo "~adaptivecpp") \
$([[ $BACKEND == DPCPP ]] && echo "+icpx" || echo "~icpx") \
$([[ $BACKEND == *"STDPAR"* ]] && echo "+stdpar" || echo "~stdpar") \
$([[ $BACKEND == STDPAR-GNU-TBB ]] && echo "stdparimplementation=gnu-tbb" ) \
$([[ $BACKEND == STDPAR-DPCPP ]] && echo "stdparimplementation=icpx" ) \
$([[ $BACKEND == STDPAR-NVHPC ]] && echo "stdparimplementation=nvhpc" ) \
$([[ $BACKEND == STDPAR-ADAPTIVECPP ]] && echo "stdparimplementation=adaptivecpp" ) \
$([[ $ARCHITECTURE == NVIDIA ]] && echo "cuda_arch=86") \
$([[ SET_NVIDIA_GPU_NONE == 1 ]] && echo "cuda_arch=none") \
$([[ $ARCHITECTURE == AMD ]] && echo "amdgpu_target=gfx90a") \
$([[ SET_AMD_GPU_NONE == 1 ]] && "amdgpu_target=none") \
build_type=$BUILD_TYPE \
arch=$(spack arch)" \
ctest -j8 --no-tests=error --output-on-failure --timeout 600 --no-compress-output -T Test \
$([[ $TEST_TYPE == BASE ]] && echo \"-R "Base*\"" || echo "-E \"Base*\"")
                            '''
                        }
                    }
                    stage('test installed PLSSVM'){
                        steps{
                            sh ''' #!/bin/bash
                                hostname
                                source $SGSSCRATCH/spack/share/spack/setup-env.sh

                                if [ "TEST_TYPE" == BASE ]; then
                                    echo "Only test the specific backends"
                                    exit 0;
                                fi

                                cd ${WORKSPACE}/plssvm/tests/data/libsvm
                                case $BACKEND in
                                    OPENCL|ADAPTIVECPP|DPCPP|STDPAR-NVHPC|STDPAR-DPCPP|STDPAR-ADAPTIVECPP)
                                        if [ "$ARCHITECTURE" != NVIDIA ]; then
                                            SET_NVIDIA_GPU_NONE=1
                                        fi
                                        ;;
                                    *) ;;
                                esac

                                case $BACKEND in
                                    OPENCL|ADAPTIVECPP|DPCPP|STDPAR-DPCPP|STDPAR-ADAPTIVECPP)
                                        if [ "$ARCHITECTURE" != AMD ]; then
                                            SET_AMD_GPU_NONE=1
                                        fi
                                    ;;
                                    *) ;;
                                esac

                                spack load "plssvm@develop $([[ $BACKEND == ADAPTIVECPP ]] && echo "%clang" )\
                                        $([[ $BACKEND == OPENMP ]] && echo " +openmp" || echo "~openmp") \
                                        $([[ $BACKEND == CUDA ]] && echo "+cuda" || echo "~cuda") \
                                        $([[ $BACKEND == HIP ]] && echo "+hip" || echo "~hip") \
                                        $([[ $BACKEND == OPENCL ]] && echo "+opencl" || echo "~opencl") \
                                        $([[ $BACKEND == ADAPTIVECPP ]] && echo "+adaptivecpp" || echo "~adaptivecpp") \
                                        $([[ $BACKEND == DPCPP ]] && echo "+icpx" || echo "~icpx") \
                                        $([[ $BACKEND == *"STDPAR"* ]] && echo "+stdpar" || echo "~stdpar") \
                                        $([[ $BACKEND == STDPAR-GNU-TBB ]] && echo "stdparimplementation=gnu-tbb" ) \
                                        $([[ $BACKEND == STDPAR-DPCPP ]] && echo "stdparimplementation=icpx" ) \
                                        $([[ $BACKEND == STDPAR-NVHPC ]] && echo "stdparimplementation=nvhpc" ) \
                                        $([[ $BACKEND == STDPAR-ADAPTIVECPP ]] && echo "stdparimplementation=adaptivecpp" ) \
                                        $([[ $ARCHITECTURE == NVIDIA ]] && echo "cuda_arch=86") \
                                        $([[ SET_NVIDIA_GPU_NONE == 1 ]] && echo "cuda_arch=none") \
                                        $([[ $ARCHITECTURE == AMD ]] && echo "amdgpu_target=gfx90a") \
                                        $([[ SET_AMD_GPU_NONE == 1 ]] && "amdgpu_target=none") \
                                        build_type=$BUILD_TYPE \
                                        arch=$(spack arch)"

                                if [[ $ARCHITECTURE == NVIDIA ]]; then
                                    export ONEAPI_DEVICE_SELECTOR=cuda:*
                                    export ACPP_VISIBILITY_MASK=cuda
                                elif [[ $ARCHITECTURE == AMD ]]; then
                                    export ONEAPI_DEVICE_SELECTOR=hip:*
                                    export ACPP_VISIBILITY_MASK=hip
                                else
                                    export ONEAPI_DEVICE_SELECTOR=*:cpu
                                    export ACPP_VISIBILITY_MASK=omp
                                fi

                                plssvm-scale --help
                                plssvm-train -i 1 5x4.libsvm ${BACKEND}-${ARCHITECTURE}-${BUILD_TYPE}-${TEST_TYPE}.model
                                plssvm-predict 5x4.libsvm ${BACKEND}-${ARCHITECTURE}-${BUILD_TYPE}-${TEST_TYPE}.model
                                rm ${BACKEND}-${ARCHITECTURE}-${BUILD_TYPE}-${TEST_TYPE}.model



                            '''
                        }
                    }



                    // stage('Test CMake Library integration'){
                    // steps{
                    //   sh '''
                    //   export COMPILER=g++
                    //   export TARGET_PLATFORM=nvidia:sm_86
                    //   if [ ! "$NODE_NAME" == "pcsgs09" ]; then
                    //       . /usr/local.nfs/Modules/latest/init/sh
                    //       module load cuda/12.0.1
                    //   fi
                    //   if [ "$BACKEND" == "DPCPP" ] || [ "$BACKEND" == "ADAPTIVECPP" ]; then
                    //       export PATH="$DPCPP_PATH/bin:${PATH}"
                    //       export LIBRARY_PATH="$DPCPP_PATH/lib:${LIBRARY_PATH}"
                    //       export LD_LIBRARY_PATH="$DPCPP_PATH/lib:${LD_LIBRARY_PATH}"
                    //       export PLSSVM_SYCL_DPCPP_INCLUDE_DIR="$DPCPP_PATH/install/include"
                    //       export COMPILER=$DPCPP_PATH/bin/clang++
                    //       export export CPLUS_INCLUDE_PATH="$DPCPP_PATH/projects/openmp/runtime/src:${CPLUS_INCLUDE_PATH}"
                    //   fi
                    //   if [ "$BACKEND" == "ADAPTIVECPP" ]; then
                    //       export PATH="$ADAPTIVECPP_PATH/bin:${PATH}"
                    //       export LIBRARY_PATH="$ADAPTIVECPP_PATH/lib:${LIBRARY_PATH}"
                    //       export LD_LIBRARY_PATH="$ADAPTIVECPP_PATH/lib:${LD_LIBRARY_PATH}"
                    //       export CPLUS_INCLUDE_PATH="$ADAPTIVECPP_PATH/include:${CPLUS_INCLUDE_PATH}"
                    //       export PLSSVM_SYCL_ADAPTIVECPP_INCLUDE_DIR="${ADAPTIVECPP_PATH}/include"
                    //   fi
                    //   if [ "$ARCHITECTURE" == "CPU" ]; then
                    //       PATH="$POCL_PATH/bin:${PATH}"
                    //       CPLUS_INCLUDE_PATH="$POCL_PATH/include:${CPLUS_INCLUDE_PATH}"
                    //       LIBRARY_PATH="$POCL_PATH/lib:${LIBRARY_PATH}"
                    //       LD_LIBRARY_PATH="$POCL_PATH/lib:${LD_LIBRARY_PATH}"
                    //       CMAKE_PREFIX_PATH="$POCL_PATH:${CMAKE_PREFIX_PATH}"
                    //       export TARGET_PLATFORM=cpu
                    //   fi
                    //   if [ "$ARCHITECTURE" == "AMD" ]; then
                    //      #export ROCM_PATH_="/opt/rocm"
                    //      export LD_LIBRARY_PATH="${ROCM_PATH}/lib64:${ROCM_PATH}/lib:${ROCM_PATH}/opencl/lib/x86_64:${ROCM_PATH}/hsa/lib:${ROCM_PATH}/hip/lib:${LD_LIBRARY_PATH}"
                    //      export CPLUS_INCLUDE_PATH="${ROCM_PATH}/hip/include:${CPLUS_INCLUDE_PATH}"
                    //      export CMAKE_PREFIX_PATH="${ROCM_PATH}/hip:${ROCM_PATH}:${CMAKE_PREFIX_PATH}"
                    //      export TARGET_PLATFORM=amd:gfx906
                    //      export LIBRARY_PATH=$LD_LIBRARY_PATH
                    //   fi
                    //   if [ "$BACKEND" == "HIP" ]; then
                    //     export COMPILER=hipcc
                    //   fi
                    //    cd $WORKSPACE/plssvm/examples/cpp
                    //    mkdir -p build/${BACKEND}_${BUILD_TYPE}_${ARCHITECTURE}
                    //    cd build/${BACKEND}_${BUILD_TYPE}_${ARCHITECTURE}
                    //    rm -rf *
                    //    export CMAKE_PREFIX_PATH=$MAKE_INSTALL_PATH/${BACKEND}_${BUILD_TYPE}_${ARCHITECTURE}/share/plssvm/cmake:$CMAKE_PREFIX_PATH
                    //    export LD_LIBRARY_PATH=$MAKE_INSTALL_PATH/${BACKEND}_${BUILD_TYPE}_${ARCHITECTURE}/lib:$LD_LIBRARY_PATH
                    //    export CPLUS_INCLUDE_PATH=$MAKE_INSTALL_PATH/${BACKEND}_${BUILD_TYPE}_${ARCHITECTURE}/include:$CPLUS_INCLUDE_PATH
                    //    $WORKSPACE/cmake-3.25.2-linux-x86_64/bin/cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_CXX_COMPILER=$COMPILER ../../
                    //     make -j4
                    //     ./prog  ${WORKSPACE}/plssvm/tests/data/libsvm/5x4.libsvm
                    //   '''

                    //   }
                    // }
                    // stage('Test python bindings'){
                    // steps{
                    //   sh '''
                    //   if [ ! "$NODE_NAME" == "pcsgs09" ]; then
                    //        . /usr/local.nfs/Modules/latest/init/sh
                    //        module load cuda/12.0.1
                    //    fi
                    //    if [ "$BACKEND" == "DPCPP" ] || [ "$BACKEND" == "ADAPTIVECPP" ]; then
                    //        export LD_LIBRARY_PATH="$DPCPP_PATH/lib:${LD_LIBRARY_PATH}"
                    //    fi
                    //    if [ "$BACKEND" == "ADAPTIVECPP" ]; then
                    //        export LD_LIBRARY_PATH="$ADAPTIVECPP_PATH/lib:${LD_LIBRARY_PATH}"
                    //    fi
                    //    if [ "$ARCHITECTURE" == "CPU" ]; then
                    //        LD_LIBRARY_PATH="$POCL_PATH/lib:${LD_LIBRARY_PATH}"
                    //    fi
                    //    if [ "$ARCHITECTURE" == "AMD" ]; then
                    //       #export ROCM_PATH_="/opt/rocm"
                    //       export LD_LIBRARY_PATH="${ROCM_PATH}/lib64:${ROCM_PATH}/lib:${ROCM_PATH}/opencl/lib/x86_64:${ROCM_PATH}/hsa/lib:${ROCM_PATH}/hip/lib:${LD_LIBRARY_PATH}"
                    //    fi
                    //     cd $WORKSPACE/plssvm/examples/python
                    //     mkdir -p build/${BACKEND}_${BUILD_TYPE}_${ARCHITECTURE}
                    //     cd build/${BACKEND}_${BUILD_TYPE}_${ARCHITECTURE}
                    //     rm -rf *
                    //     export LD_LIBRARY_PATH=$MAKE_INSTALL_PATH/${BACKEND}_${BUILD_TYPE}_${ARCHITECTURE}/lib:$LD_LIBRARY_PATH
                    //     export PYTHONPATH=$MAKE_INSTALL_PATH/${BACKEND}_${BUILD_TYPE}_${ARCHITECTURE}/lib:$PYTHONPATH
                    //     python3 ../../sklearn_like_svc.py
                    //     cp ${WORKSPACE}/plssvm/tests/data/libsvm/5x4.libsvm train_data.libsvm
                    //     cp ${WORKSPACE}/plssvm/tests/data/libsvm/5x4.libsvm test_data.libsvm
                    //     python3 ../../main.py
                    //   '''

                    //   }
                    // }
                }
            }
        }
        // stage('Coverage Analysis') {
        //     steps {
        //         dir('plssvm') {
        //             sh '''
        //                 echo $HOSTNAME
        //                  . /usr/local.nfs/Modules/latest/init/sh
        //                  module load cuda/12.0.1
        //                  export PATH="$DPCPP_PATH/bin:${PATH}"
        //                  export LIBRARY_PATH="$DPCPP_PATH/lib:${LIBRARY_PATH}"
        //                  export LD_LIBRARY_PATH="$DPCPP_PATH/lib:${LD_LIBRARY_PATH}"
        //                  export PLSSVM_SYCL_DPCPP_INCLUDE_DIR="$DPCPP_PATH/install/include"
        //                  export COMPILER=$DPCPP_PATH/bin/clang++
        //                  export export CPLUS_INCLUDE_PATH="$DPCPP_PATH/projects/openmp/runtime/src:${CPLUS_INCLUDE_PATH}"
        //                  export PATH="$ADAPTIVECPP_PATH/bin:${PATH}"
        //                  export LIBRARY_PATH="$ADAPTIVECPP_PATH/lib:${LIBRARY_PATH}"
        //                  export LD_LIBRARY_PATH="$ADAPTIVECPP_PATH/lib:${LD_LIBRARY_PATH}"
        //                  export CPLUS_INCLUDE_PATH="$ADAPTIVECPP_PATH/include:${CPLUS_INCLUDE_PATH}"
        //                  export PLSSVM_SYCL_ADAPTIVECPP_INCLUDE_DIR="${ADAPTIVECPP_PATH}/include"

        //                 mkdir -p $WORKSPACE/plssvm/build/Debug_cov
        //                 cd $WORKSPACE/plssvm/build/Debug_cov
        //                 rm -rf *
        //                 $WORKSPACE/cmake-3.25.2-linux-x86_64/bin/cmake -DCMAKE_BUILD_TYPE=Coverage -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CC_COMPILER=gcc -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_TEST_FILE_NUM_DATA_POINTS=50 -DPLSSVM_TEST_FILE_NUM_FEATURES=10 -DPLSSVM_ENABLE_SYCL_ADAPTIVECPP_BACKEND=OFF ../../
        //                 make -j36 coverage
        //                 wget -N https://raw.githubusercontent.com/eriwen/lcov-to-cobertura-xml/master/lcov_cobertura/lcov_cobertura.py
        //                 python lcov_cobertura.py test_clean.info
        //             '''
        //         }
        //         cobertura coberturaReportFile: "plssvm/build/Debug_cov/coverage.xml"
        //     }
        // } // end Coverage Analysis
}



    post {
        always {
            // Process the CTest xml output with the xUnit plugin
            xunit (
                testTimeMargin: '3000',
                thresholdMode: 1,
                thresholds: [
                    failed(failureThreshold: '0')
                ],
                tools: [CTest(
                    pattern: 'plssvm/build*/*/Testing/**/*.xml',
                    deleteOutputFiles: true,
                    failIfNotNew: false,
                    skipNoTestFiles: true,
                    stopProcessingIfError: true
                )]
            )
        }
        success {
            script {
                buildbadge.setStatus('success')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                     --request POST \
                     --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                     --header "Content-Type: application/json" \
                     --header "authorization: Bearer ${gitlab_token}" \
                     --data "{
                        \\"state\\": \\"success\\",
                        \\"context\\": \\"Jenkins CPU tests\\",
                        \\"description\\": \\"Jenkins CI Job: Jenkins CPU tests\\",
                        \\"target_url\\": \\"https:///jenkins-sim.informatik.uni-stuttgart.de/view/PLSSVM/job/PLSSVM/job/PLSSVM/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
        failure {
            script {
                buildbadge.setStatus('failing')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                     --request POST \
                     --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                     --header "Content-Type: application/json" \
                     --header "authorization: Bearer ${gitlab_token}" \
                     --data "{
                        \\"state\\": \\"failure\\",
                        \\"context\\": \\"Jenkins CPU tests\\",
                        \\"description\\": \\"Jenkins CI Job: Jenkins CPU tests\\",
                        \\"target_url\\": \\"https:///jenkins-sim.informatik.uni-stuttgart.de/view/PLSSVM/job/PLSSVM/job/PLSSVM/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
        aborted {
            script {
                buildbadge.setStatus('aborted')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                     --request POST \
                     --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                     --header "Content-Type: application/json" \
                     --header "authorization: Bearer ${gitlab_token}" \
                     --data "{
                        \\"state\\": \\"error\\",
                        \\"context\\": \\"Jenkins CPU tests\\",
                        \\"description\\": \\"Jenkins CI Job: Jenkins CPU tests\\",
                        \\"target_url\\": \\"https:///jenkins-sim.informatik.uni-stuttgart.de/view/PLSSVM/job/PLSSVM/job/PLSSVM/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
    }
}