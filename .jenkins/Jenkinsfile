#!groovy

def buildbadge = addEmbeddableBadgeConfiguration(id: "Jenkins", subject: "Jenkins Tests", status: "skipped")

if (currentBuild.getBuildCauses().toString().contains('BranchIndexingCause')) {
    print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} triggered by branch indexing..."
    if (env.BRANCH_NAME != "master") {
        if (env.BUILD_NUMBER != "1") { // Always execute first build to load this configuration and thus the triggers
            print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} skipped due being triggered by Branch Indexing instead of SCM change!"
            buildbadge.setStatus('skipped')
            currentBuild.result = 'ABORTED'
            return // early exit to avoid redundant builds
        }
    }
} else {
    print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} triggered by SCM change..."
    print "Proceeding!"
}

pipeline {
    agent { label 'pcsgs02 || pcsgs03 || pcsgs04 || pcsgs05' }

    options {
        buildDiscarder(
            logRotator(
                daysToKeepStr: "21",
                numToKeepStr: "50",
                artifactDaysToKeepStr: "21",
                artifactNumToKeepStr: "50"
            )
        )
    disableConcurrentBuilds()
    }

    triggers {
        githubPush() // Trigger by push to respective github branch
        pollSCM 'H/30 * * * *' // Fallback polling solution as some pushes are somehow lost
    }

    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        BRANCH_NAME = "${env.BRANCH_NAME}"
        WORKSPACE= "${env.WORKSPACE}"

        // ROCM / HIP
        ROCM_PATH = "/opt/rocm"
        LD_LIBRARY_PATH = "${env.ROCM_PATH}/lib64:${env.ROCM_PATH}/lib:${env.ROCM_PATH}/opencl/lib/x86_64:${env.ROCM_PATH}/hsa/lib:${env.ROCM_PATH}/hip/lib:${env.LD_LIBRARY_PATH}"
        CPLUS_INCLUDE_PATH = "${env.ROCM_PATH}/hip/include:${env.CPLUS_INCLUDE_PATH}"
        CMAKE_PREFIX_PATH = "${env.ROCM_PATH}/hip:${env.ROCM_PATH}:${env.CMAKE_PREFIX_PATH}"

        // PoCL
        POCL_PATH = "${env.WORKSPACE}/pocl-install"

        // GCC
        GCC_PATH = "${env.WORKSPACE}/gcc-install"

        // DPCPP
        DPCPP_PATH = "${env.WORKSPACE}/llvm/build"
        DPCPP_FORCE_REBUILD = "FALSE"

        // hipSYCL
        HIPSYCL_PATH = "${env.WORKSPACE}/hipsycl-install"
        HIPSYCL_FORCE_REBUILD = "FALSE"

        // install path
        MAKE_INSTALL_PATH = "${env.WORKSPACE}/plssvm_install"
        MAKE_INSTALL_LIBRARY_SAMPLE_REBUILD = "FALSE"


    }

    stages{
        stage('Dependency -- CMake')
        {
            steps{
                script{
                    def labels = [  'pcsgs03', 'pcsgs04', 'pcsgs05', 'pcsgs09', 'pcsgs11']
                    def builders = [: ]
                    for (x in labels){
                        def label = x
                        builders[label] = {
                            node(label) {
                                sh '''
                                    if [ -f cmake-3.25.2-linux-x86_64.tar.gz* ]; then
                                        rm cmake-3.25.2-linux-x86_64.tar.gz*
                                        rm -rf cmake-3.25.2-linux-x86_64
                                    fi
                                    if [ ! -d cmake-3.25.2-linux-x86_64  ]; then
                                        wget https://github.com/Kitware/CMake/releases/download/v3.25.2/cmake-3.25.2-linux-x86_64.tar.gz
                                        tar xvzf cmake-3.25.2-linux-x86_64.tar.gz
                                        rm cmake-3.25.2-linux-x86_64.tar.gz*
                                    fi
                                '''
                            }

                        }
                    }
                    parallel builders
                }
            }
        }
        stage('Dependency -- Ninja')
        {
            steps{
                script{
                    def labels = [ 'pcsgs03', 'pcsgs04', 'pcsgs05', 'pcsgs09', 'pcsgs11']
                    def builders = [: ]
                    for (x in labels){
                        def label = x
                        builders[label] = {
                            node(label) {
                                sh '''
                                   if [ ! -f ninja ]; then
                                       wget https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-linux.zip
                                       unzip ninja-linux.zip
                                       rm ninja-linux.zip*
                                   fi
                                '''
                            }

                        }
                    }
                    parallel builders
                }
            }
        }
        stage('Checkout PLSSVM') {
            steps {
              script{
                def labels = [ 'pcsgs03', 'pcsgs04', 'pcsgs05', 'pcsgs09', 'pcsgs11']
                def builders = [: ]
                for (x in labels){
                    def label = x
                        builders[label] = {
                            node(label) {
                               dir('plssvm') {
                               checkout scm
                             }
                          }

                      }
                  }
                parallel builders
                }
            }
        }
        stage('Dependency -- gcc')
        {
            steps{
                script{
                    def labels = [ 'pcsgs03', 'pcsgs04', 'pcsgs05', 'pcsgs09', 'pcsgs11']
                    def builders = [: ]
                    for (x in labels){
                        def label = x
                            builders[label] = {
                                node(label) {
                                    sh '''
                                    if [ ! -d "$GCC_PATH" ] || [ "$GCC_FORCE_REBUILD" = "TRUE" ]; then
                                        $WORKSPACE/plssvm/.jenkins/scripts/build-gcc.sh $GCC_PATH
                                   fi

                                '''
                            }

                        }
                    }
                    parallel builders
                }
            }
        }
        stage('Dependency -- DPC++')
        {
            environment {
                PATH="$WORKSPACE:$GCC_PATH/bin:$WORKSPACE/cmake-3.25.2-linux-x86_64/bin:${env.PATH}"
            }
            steps{
                script{
                    def labels = [ 'pcsgs03', 'pcsgs04', 'pcsgs05',  'pcsgs11'] // 'pcsgs02'
                    def builders = [: ]
                    for (x in labels){
                        def label = x
                        builders[label] = {
                            node(label) {
                                sh '''
                                    . /usr/local.nfs/Modules/latest/init/sh
                                    echo $PATH
                                    module load cuda/11.4.3
                                    if [ ! -d "$DPCPP_PATH" ] || [ "$DPCPP_FORCE_REBUILD" = "TRUE" ]; then
                                        rm -rf llvm
                                        git clone --dept 1 --branch sycl-nightly/20221102 https://github.com/intel/llvm.git llvm
                                        cd llvm
                                        rm -rf build
                                        whereis g++
                                        python buildbot/configure.py --cuda --llvm-external-projects="clang-tools-extra,compiler-rt,openmp" --cmake-opt="-DENABLE_LIBOMPTARGET=OFF"
                                        python buildbot/compile.py
                                        cmake --build build -- omp
                                        cmake --build build -- install
                                        rm -rf "$HIPSYCL_PATH"
                                    fi

                                '''
                            }
                        }
                         builders['pcsgs09'] = {
                             node('pcsgs09') {
                                 sh '''
                                      if [ ! -d "$DPCPP_PATH" ] || [ "$DPCPP_FORCE_REBUILD" = "TRUE" ]; then
                                          rm -rf llvm
                                          git clone --dept 1 --branch sycl-nightly/20230110 https://github.com/intel/llvm.git llvm
                                          cd llvm
                                          python buildbot/configure.py --hip --llvm-external-projects="clang-tools-extra,compiler-rt,openmp" --cmake-opt="-DENABLE_LIBOMPTARGET=OFF" --cmake-opt=-DSYCL_BUILD_PI_HIP_ROCM_DIR=${ROCM_PATH} --hip-platform AMD
                                          python buildbot/compile.py
                                          cmake --build build -- omp
                                          cmake --build build -- install

                                          rm -rf "$HIPSYCL_PATH"
                                      fi

                                 '''
                             }
                         }
                    }
                    parallel builders
                }
            }
        }

        stage('Dependency -- hipSYCL')
                {
                     environment {
                        PATH="$WORKSPACE/cmake-3.25.2-linux-x86_64/bin:$DPCPP_PATH/bin:${env.PATH}"
                        LIBRARY_PATH="$DPCPP_PATH/lib:${env.LIBRARY_PATH}"
                        LD_LIBRARY_PATH="$DPCPP_PATH/lib:${env.LD_LIBRARY_PATH}"
                        CPLUS_INCLUDE_PATH="$DPCPP_PATH/install/include/sycl:$DPCPP_PATH/install/include:$DPCPP_PATH/projects/openmp/runtime/src:${env.CPLUS_INCLUDE_PATH}"
                    }
                    steps{
                        script{
                            def labels = [ 'pcsgs03', 'pcsgs04', 'pcsgs05',  'pcsgs11']
                            def builders = [: ]
                            for (x in labels){
                                def label = x
                                builders[label] = {
                                    node(label) {
                                        sh '''
                                            . /usr/local.nfs/Modules/latest/init/sh
                                            module load cuda/11.4.3
                                            if [ ! -d "$HIPSYCL_PATH" ] || [ "$HIPSYCL_FORCE_REBUILD" = "TRUE" ]; then
                                                rm -rf hipSYCL
                                                rm -rf "$HIPSYCL_PATH"

                                                mkdir $HIPSYCL_PATH
                                                git clone https://github.com/illuhad/hipSYCL.git hipSYCL
                                                cd hipSYCL
                                                git checkout 012e16d6d3d57330c176d7d536f657b0d8a9a197
                                                mkdir build
                                                cd build
                                                cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$HIPSYCL_PATH -DCMAKE_CXX_COMPILER=clang++ ..
                                                make -j
                                                make install
                                                cd $WORKSPACE
                                                rm -rf hipSYCL
                                            fi
                                        '''
                                    }
                                }
                                 builders['pcsgs09'] = {
                                     node('pcsgs09') {
                                         sh '''
                                             if [ ! -d "$HIPSYCL_PATH" ] || [ "$HIPSYCL_FORCE_REBUILD" = "TRUE" ]; then
                                                 rm -rf hipSYCL
                                                 rm -rf "$HIPSYCL_PATH"

                                                 mkdir $HIPSYCL_PATH
                                                 git clone https://github.com/illuhad/hipSYCL.git hipSYCL
                                                 cd hipSYCL
                                                 git checkout 012e16d6d3d57330c176d7d536f657b0d8a9a197
                                                 mkdir build
                                                 cd build
                                                 cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$HIPSYCL_PATH -DCMAKE_CXX_COMPILER=clang++ ..
                                                 make -j
                                                 make install
                                                 cd $WORKSPACE
                                                 rm -rf hipSYCL
                                             fi
                                         '''
                                     }
                                 }
                            }
                            parallel builders
                        }
                    }
                }
        stage('Dependency -- PoCL')
        {

            steps{
                script{
                    def labels = [ 'pcsgs03', 'pcsgs05', 'pcsgs09',  'pcsgs11']
                    def builders = [: ]
                    for (x in labels){
                        def label = x
                        builders[label] = {
                            node(label) {
                                sh '''
                                    if [ -f pocl.tar.gz* ]; then
                                        rm pocl.tar.gz*
                                        rm -rf pocl.tar.gz*
                                    fi
                                    if [ ! -d $POCL_PATH ]; then
                                        wget https://github.com/pocl/pocl/archive/refs/tags/v3.1.tar.gz -O pocl.tar.gz
                                        tar xzf pocl.tar.gz
                                        cd pocl-3.1
                                        mkdir -p build
                                        cd build
                                        cmake -DCMAKE_INSTALL_PREFIX=$POCL_PATH  -DCMAKE_C_COMPILER=/import/sgs.scratch/vancraar/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.4.0/llvm-14.0.6-s7bbf6lgiqt47pxskcquoxj7fpttlyxs/bin/clang -DCMAKE_CXX_COMPILER=/import/sgs.scratch/vancraar/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.4.0/llvm-14.0.6-s7bbf6lgiqt47pxskcquoxj7fpttlyxs/bin/clang++  -DENABLE_TESTS=OFF -DENABLE_EXAMPLES=OFF -DENABLE_CUDA=OFF -DENABLE_TCE=OFF -DENABLE_HSA=OFF -DLLVM_PATH=/import/sgs.scratch/vancraar/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.4.0/llvm-14.0.6-s7bbf6lgiqt47pxskcquoxj7fpttlyxs -DWITH_LLVM_CONFIG=/import/sgs.scratch/vancraar/spack/opt/spack/linux-ubuntu20.04-skylake/gcc-9.4.0/llvm-14.0.6-s7bbf6lgiqt47pxskcquoxj7fpttlyxs/bin/llvm-config -DINSTALL_OPENCL_HEADERS=True -DENABLE_LLVM=True -DSTATIC_LLVM=True ..
                                        make -j 4 install
                                        cd ../..
                                        rm pocl.tar.gz*
                                    fi
                                '''
                            }

                        }
                    }
                    parallel builders
                }
            }
        }

        stage('Build'){
            matrix{
                axes {
                    axis {
                        name 'BUILD_TYPE'
                        values 'Release', 'Debug', 'RelWithDebInfo'

                    }
                    axis {
                        name 'BACKEND'
                        values 'OPENMP', 'CUDA', 'HIP', 'OPENCL', 'SYCL'
                    }
                }

                agent { label "${env.BACKEND.equalsIgnoreCase('HIP') ? 'pcsgs09' : 'pcsgs03 || pcsgs04 || pcsgs05'}"}
                stages{
                    stage('Checkout PLSSVM') {
                        steps {
                            dir('plssvm') {
                                checkout scm
                            }
                        }
                    }

                    stage('Build PLSSVM'){
                        steps{
                            dir('plssvm') {
                                sh '''
                                    . /usr/local.nfs/Modules/latest/init/sh
                                    export PATH=${WORKSPACE}/cmake-3.25.2-linux-x86_64/bin:$PATH
                                    if [  $BACKEND == "CUDA" ]; then
                                        module load cuda/11.4.3
                                    fi
                                    mkdir -p build/${BUILD_TYPE}_${BACKEND}
                                    cd build/${BUILD_TYPE}_${BACKEND}
                                    rm -rf *
                                    rm -rf $MAKE_INSTALL_PATH/${BACKEND}
                                    cmake -DCMAKE_INSTALL_PREFIX=$MAKE_INSTALL_PATH/${BACKEND} \
                                        -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
                                        -DCMAKE_CXX_COMPILER=$([[ $BACKEND == HIP ]] && echo "hipcc" || echo "g++") \
                                        -DPLSSVM_TARGET_PLATFORMS=$([[ $BACKEND == OPENMP ]] && echo "cpu" || [[ $BACKEND == HIP ]] && echo "amd:gfx906" || echo "nvidia:sm_86")  \
                                        -DPLSSVM_ENABLE_ASSERTS=ON \
                                        -DPLSSVM_ENABLE_OPENMP_BACKEND=$([[ $BACKEND == OPENMP ]] && echo "ON" || echo "OFF") \
                                        -DPLSSVM_ENABLE_SYCL_BACKEND=$([[ $BACKEND == SYCL ]] && echo "ON" || echo "OFF") \
                                        -DPLSSVM_ENABLE_CUDA_BACKEND=$([[ $BACKEND == CUDA ]] && echo "ON" || echo "OFF") \
                                        -DPLSSVM_ENABLE_HIP_BACKEND=$([[ $BACKEND == HIP ]] && echo "ON" || echo "OFF") \
                                        -DPLSSVM_ENABLE_OPENCL_BACKEND=$([[ $BACKEND == OPENCL ]] && echo "ON" || echo "OFF") \
                                        ../../
                                    make -j4 #install
                                '''
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            // Process the CTest xml output with the xUnit plugin
            xunit (
                testTimeMargin: '3000',
                thresholdMode: 1,
                thresholds: [
                    failed(failureThreshold: '0')
                ],
                tools: [CTest(
                    pattern: 'plssvm/build/*/Testing/**/*.xml',
                    deleteOutputFiles: true,
                    failIfNotNew: false,
                    skipNoTestFiles: true,
                    stopProcessingIfError: true
                )]
            )
        }
        success {
            script {
                buildbadge.setStatus('success')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                     --request POST \
                     --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                     --header "Content-Type: application/json" \
                     --header "authorization: Bearer ${gitlab_token}" \
                     --data "{
                        \\"state\\": \\"success\\",
                        \\"context\\": \\"Jenkins CPU tests\\",
                        \\"description\\": \\"Jenkins CI Job: Jenkins CPU tests\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Github-CPU/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
        failure {
            script {
                buildbadge.setStatus('failing')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                     --request POST \
                     --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                     --header "Content-Type: application/json" \
                     --header "authorization: Bearer ${gitlab_token}" \
                     --data "{
                        \\"state\\": \\"failure\\",
                        \\"context\\": \\"Jenkins CPU tests\\",
                        \\"description\\": \\"Jenkins CI Job: Jenkins CPU tests\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Github-CPU/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
        aborted {
            script {
                buildbadge.setStatus('aborted')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                     --request POST \
                     --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                     --header "Content-Type: application/json" \
                     --header "authorization: Bearer ${gitlab_token}" \
                     --data "{
                        \\"state\\": \\"error\\",
                        \\"context\\": \\"Jenkins CPU tests\\",
                        \\"description\\": \\"Jenkins CI Job: Jenkins CPU tests\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Github-CPU/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
    }
}