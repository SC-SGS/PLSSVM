#!groovy

def buildbadge = addEmbeddableBadgeConfiguration(id: "Jenkins", subject: "Jenkins Tests", status: "skipped")

if (currentBuild.getBuildCauses().toString().contains('BranchIndexingCause')) {
    print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} triggered by branch indexing..."
    if (env.BRANCH_NAME != "master") {
        if (env.BUILD_NUMBER != "1") { // Always execute first build to load this configuration and thus the triggers
            print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} skipped due being triggered by Branch Indexing instead of SCM change!"
            buildbadge.setStatus('skipped')
            currentBuild.result = 'ABORTED'
            return // early exit to avoid redundant builds
        }
    }
} else {
    print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} triggered by SCM change..."
    print "Proceeding!"
}

pipeline {
    agent { label 'pcsgs02 || pcsgs03 || pcsgs04 || pcsgs05' }

    options {
        buildDiscarder(
            logRotator(
                daysToKeepStr: "21",
                numToKeepStr: "50",
                artifactDaysToKeepStr: "21",
                artifactNumToKeepStr: "50"
            )
        )
    disableConcurrentBuilds()
    }

    triggers {
        githubPush() // Trigger by push to respective github branch
        pollSCM 'H/30 * * * *' // Fallback polling solution as some pushes are somehow lost
    }

    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        BRANCH_NAME = "${env.BRANCH_NAME}"
        WORKSPACE= "${env.WORKSPACE}"

        // DPCPP
        DPCPP_PATH = "${env.WORKSPACE}/llvm/build"

        // hipSYCL
        HIPSYCL_PATH = "${env.WORKSPACE}/hipsycl-install"
    }

    stages {
        stage('Init') {
            steps {
                dir('plssvm') {
                    sh '''
                        gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                        curl --verbose\
                            --request POST \
                            --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                            --header "Content-Type: application/json" \
                            --header "authorization: Bearer ${gitlab_token}" \
                            --data "{
                                \\"state\\": \\"pending\\",
                                \\"context\\": \\"Jenkins CPU tests\\",
                                \\"description\\": \\"Jenkins CI Job: Jenkins CPU tests\\",
                                \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Github-CPU/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                        }"
                    '''
                }
            }
        }
        stage('Checkout PLSSVM') {
            steps {
                dir('plssvm') {
                    checkout scm
                }
            }
        }
        stage('Setup Python Dependencies'){
            steps{
                sh '''
                    /usr/bin/python3.8 -m pip install --user arff
                    /usr/bin/python3.8 -m pip install --user numpy
                    /usr/bin/python3.8 -m pip install --user pandas
                    /usr/bin/python3.8 -m pip install --user sklearn
                    /usr/bin/python3.8 -m pip install --user argparse
                '''
            }
        }

        stage('install ninja and cmake') {
            steps{
                sh '''
                    if [ ! -f ninja ]; then
                        wget https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-linux.zip
                        unzip ninja-linux.zip
                        rm ninja-linux.zip*
                    fi


                    if [ ! -d cmake-3.24.1-linux-x86_64 ]; then
                        wget https://github.com/Kitware/CMake/releases/download/v3.24.1/cmake-3.24.1-linux-x86_64.tar.gz
                        tar xvzf cmake-3.24.1-linux-x86_64.tar.gz
                        rm cmake-3.24.1-linux-x86_64.tar.gz*
                    fi


                    '''
                    script{
                        env.PATH="$WORKSPACE:$PATH"
                        env.PATH="$WORKSPACE/cmake-3.24.1-linux-x86_64/bin:$PATH"
                    }

            }
        }



        stage('Build DPCPP') {
            steps{
                sh '''
		            if [ ! -d "llvm/build" ]; then
                        git clone --dept 1 --branch 2022-06 https://github.com/intel/llvm.git llvm
                        cd llvm
                        python buildbot/configure.py --llvm-external-projects="clang-tools-extra,compiler-rt,openmp" --cmake-opt="-DENABLE_LIBOMPTARGET=OFF"
                        python buildbot/compile.py
                        cmake --build build -- omp
                        cmake --build build -- install
                    fi
                '''
                script{
                    env.LIBRARY_PATH="$DPCPP_PATH/lib:$DPCPP_PATH/install/lib/clang/15.0.0/lib/x86_64-unknown-linux-gnu"
                    env.PATH="$DPCPP_PATH/bin:$PATH"
                    env.PLSSVM_SYCL_DPCPP_INCLUDE_DIR="$DPCPP_PATH/install/include"
                    env.CPLUS_INCLUDE_PATH="$DPCPP_PATH/projects/openmp/runtime/src:$DPCPP_PATH/install/include:$DPCPP_PATH/install/include/sycl:$env.CPLUS_INCLUDE_PATH"
                    env.LD_LIBRARY_PATH="$DPCPP_PATH/install/lib/clang/15.0.0/lib/x86_64-unknown-linux-gnu:$DPCPP_PATH/install/lib:$DPCPP_PATH/lib:$env.LD_LIBRARY_PATH"
                }

            }
        }


        stage('Build HipSYCL') {
            steps{
                sh '''
                    module load cuda/11.2.2
		            if [ ! -d "$HIPSYCL_PATH" ]; then
                        mkdir $HIPSYCL_PATH
                        git clone --dept 1 --branch v0.9.3 https://github.com/illuhad/hipSYCL.git hipSYCL
                        cd hipSYCL
                        mkdir build
                        cd build
                        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$HIPSYCL_PATH -DCMAKE_CXX_COMPILER=clang++ ..
                        make -j
                        make install
                        cd $WORKSPACE
                        rm -rf hipSYCL
                    fi
                    '''

                script{
                    env.LD_LIBRARY_PATH = "${HIPSYCL_PATH}/lib:${LD_LIBRARY_PATH}"
                    env.PATH = "${HIPSYCL_PATH}/bin:${PATH}"
                    env.PLSSVM_SYCL_HIPSYCL_INCLUDE_DIR = "${HIPSYCL_PATH}/include"
                }
            }
        }


        stage('spack and pocl') {
            steps{
                sh '''
                    rm -rf spack
                    git clone --branch v0.18.1 https://github.com/spack/spack.git || true
                    cd spack
                    git checkout f52f6e99dbf1131886a80112b8c79dfc414afb7c -- var/spack/repos/builtin/packages/pocl/package.py
                    cd ..
                    source spack/share/spack/setup-env.sh
                    spack clean -a
                    spack install  pocl@1.8+distro
                    '''
            }
        }



        // TODO: enable DPC++ on CPUs (missing OpenCL CPU runtime)
        // Release
        // OpenMP backend
        stage('Build PLSSVM Release - OpenMP') {
            steps {
                dir('plssvm') {
                    sh '''
                        mkdir -p build/Release_OpenMP
                        cd build/Release_OpenMP
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Release -DPLSSVM_TARGET_PLATFORMS="cpu" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=ON -DPLSSVM_ENABLE_SYCL_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF ../../
                        make -j4
                    '''
                }
            }
        }
        stage('Run Tests Release - OpenMP') {
            steps {
                dir('plssvm/build/Release_OpenMP') {
                    warnError('Release tests failed!') {
                        sh '''
                            ctest -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }
        // OpenCL backend
        stage('Build PLSSVM Release - OpenCL') {
            steps {
                dir('plssvm') {
                    sh '''
                        source ${WORKSPACE}/spack/share/spack/setup-env.sh
                        spack load pocl

                        mkdir -p build/Release_OpenCL
                        cd build/Release_OpenCL
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Release -DPLSSVM_TARGET_PLATFORMS="cpu" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=ON -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF ../../
                        make -j4
                    '''
                }
            }
        }
        stage('Run Tests Release - OpenCL') {
            steps {
                dir('plssvm/build/Release_OpenCL') {
                    warnError('Release tests failed!') {
                        sh '''
                            source ${WORKSPACE}/spack/share/spack/setup-env.sh
                            spack load pocl

                            ctest -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }
        // SYCL backend: hipSYCL
        stage('Build PLSSVM Release - hipSYCL') {
            steps {
                dir('plssvm') {
                    sh '''
                        mkdir -p build/Release_hipSYCL
                        cd build/Release_hipSYCL
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Release -DPLSSVM_TARGET_PLATFORMS="cpu" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=ON -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF ../../
                        make -j4
                    '''
                }
            }
        }
        stage('Run Tests Release - hipSYCL') {
            steps {
                dir('plssvm/build/Release_hipSYCL') {
                    warnError('Release tests failed!') {
                        sh '''
                            ctest -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }
//        // OpenMP + OpenCL + hipSYCL backends simultaneously
//        stage('Build PLSSVM Release - All Available') {
//            steps {
//                dir('plssvm') {
//                    sh '''
//                        source ${WORKSPACE}/spack/share/spack/setup-env.sh
//                        module use /home/breyerml/.modulefiles/
//                        spack load pocl
//                        module load network_hipsycl_cpu_pocl
//                        mkdir -p build/Release
//                        cd build/Release
//                        rm -rf *
//                        cmake -DCMAKE_BUILD_TYPE=Release -DPLSSVM_TARGET_PLATFORMS="cpu" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=ON -DPLSSVM_ENABLE_SYCL_BACKEND=ON -DPLSSVM_ENABLE_OPENCL_BACKEND=ON -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF -DPLSSVM_TEST_FILE_NUM_DATA_POINTS=500 -DPLSSVM_TEST_FILE_NUM_FEATURES=200 ../../
//                        make -j4
//                    '''
//                }
//            }
//        }
//        stage('Run Tests Release - All Available') {
//            steps {
//                dir('plssvm') {
//                    warnError('Release tests failed!') {
//                        sh '''
//                            source ${WORKSPACE}/spack/share/spack/setup-env.sh
//                            module use /home/breyerml/.modulefiles/
//                            spack load pocl
//                            module load network_hipsycl_cpu_pocl
//                            cd build/Release
//                            ctest -j4 --no-compress-output -T Test
//                        '''
//                    }
//                }
//            }
//        }
        // Debug
        // OpenMP backend
        stage('Build PLSSVM Debug - OpenMP') {
            steps {
                dir('plssvm') {
                    sh '''
                        mkdir -p build/Debug_OpenMP
                        cd build/Debug_OpenMP
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Debug -DPLSSVM_TARGET_PLATFORMS="cpu" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=ON -DPLSSVM_ENABLE_SYCL_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF -DPLSSVM_TEST_FILE_NUM_DATA_POINTS=100 -DPLSSVM_TEST_FILE_NUM_FEATURES=20 ../../
                        make -j4
                    '''
                }
            }
        }
        stage('Run Tests Debug - OpenMP') {
            steps {
                dir('plssvm/build/Debug_OpenMP') {
                    warnError('Debug tests failed!') {
                        sh '''
                            ctest -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }
        // OpenCL backend
        stage('Build PLSSVM Debug - OpenCL') {
            steps {
                dir('plssvm') {
                    sh '''
                        source ${WORKSPACE}/spack/share/spack/setup-env.sh
                        spack load pocl

                        mkdir -p build/Debug_OpenCL
                        cd build/Debug_OpenCL
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Debug -DPLSSVM_TARGET_PLATFORMS="cpu" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=ON -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF -DPLSSVM_TEST_FILE_NUM_DATA_POINTS=100 -DPLSSVM_TEST_FILE_NUM_FEATURES=20 ../../
                        make -j4
                    '''
                }
            }
        }
        stage('Run Tests Debug - OpenCL') {
            steps {
                dir('plssvm/build/Debug_OpenCL') {
                    warnError('Debug tests failed!') {
                        sh '''
                            source ${WORKSPACE}/spack/share/spack/setup-env.sh
                            spack load pocl

                            ctest -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }
        // SYCL backend: hipSYCL
        stage('Build PLSSVM Debug - hipSYCL') {
            steps {
                dir('plssvm') {
                    sh '''

                        mkdir -p build/Debug_hipSYCL
                        cd build/Debug_hipSYCL
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Debug -DPLSSVM_TARGET_PLATFORMS="cpu" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=ON -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_HIP_BACKEND=OFF -DPLSSVM_TEST_FILE_NUM_DATA_POINTS=100 -DPLSSVM_TEST_FILE_NUM_FEATURES=20 ../../
                        make -j4
                    '''
                }
            }
        }
        stage('Run Tests Debug - hipSYCL') {
            steps {
                dir('plssvm/build/Debug_hipSYCL') {
                    warnError('Release tests failed!') {
                        sh '''
                            ctest -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }
        // Coverage Analysis
        stage('Perform Coverage Analysis') {
            steps {
                dir('plssvm') {
                    sh '''
                        mkdir -p build/Debug_cov
                        cd build/Debug_cov
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Coverage -DPLSSVM_TARGET_PLATFORMS="cpu" -DPLSSVM_ENABLE_ASSERTS=ON -DPLSSVM_TEST_FILE_NUM_DATA_POINTS=100 -DPLSSVM_TEST_FILE_NUM_FEATURES=20 ../../
                        make -j4 coverage
                        wget -N https://raw.githubusercontent.com/eriwen/lcov-to-cobertura-xml/master/lcov_cobertura/lcov_cobertura.py
                        python lcov_cobertura.py test_clean.info
                    '''
                    cobertura coberturaReportFile: 'build/Debug_cov/coverage.xml'
                }
            }
        }
    }
    post {
        always {
            // Process the CTest xml output with the xUnit plugin
            xunit (
                testTimeMargin: '3000',
                thresholdMode: 1,
                thresholds: [
                    skipped(failureThreshold: '0'),
                    failed(failureThreshold: '0')
                ],
                tools: [CTest(
                    pattern: 'plssvm/build/*/Testing/**/*.xml',
                    deleteOutputFiles: true,
                    failIfNotNew: false,
                    skipNoTestFiles: true,
                    stopProcessingIfError: true
                )]
            )

        }
        success {
            script {
                buildbadge.setStatus('success')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                    --request POST \
                    --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                    --header "Content-Type: application/json" \
                    --header "authorization: Bearer ${gitlab_token}" \
                    --data "{
                        \\"state\\": \\"success\\",
                        \\"context\\": \\"Jenkins CPU tests\\",
                        \\"description\\": \\"Jenkins CI Job: Jenkins CPU tests\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Github-CPU/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
        failure {
            script {
                buildbadge.setStatus('failing')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                    --request POST \
                    --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                    --header "Content-Type: application/json" \
                    --header "authorization: Bearer ${gitlab_token}" \
                    --data "{
                        \\"state\\": \\"failure\\",
                        \\"context\\": \\"Jenkins CPU tests\\",
                        \\"description\\": \\"Jenkins CI Job: Jenkins CPU tests\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Github-CPU/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
        aborted {
            script {
                buildbadge.setStatus('aborted')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                    --request POST \
                    --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                    --header "Content-Type: application/json" \
                    --header "authorization: Bearer ${gitlab_token}" \
                    --data "{
                        \\"state\\": \\"error\\",
                        \\"context\\": \\"Jenkins CPU tests\\",
                        \\"description\\": \\"Jenkins CI Job: Jenkins CPU tests\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Github-CPU/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
    }
}