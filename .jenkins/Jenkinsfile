#!groovy

def buildbadge = addEmbeddableBadgeConfiguration(id: "Jenkins", subject: "Jenkins Tests", status: "skipped")

if (currentBuild.getBuildCauses().toString().contains('BranchIndexingCause')) {
    print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} triggered by branch indexing..."
    if (env.BRANCH_NAME != "master") {
        if (env.BUILD_NUMBER != "1") { // Always execute first build to load this configuration and thus the triggers
            print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} skipped due being triggered by Branch Indexing instead of SCM change!"
            buildbadge.setStatus('skipped')
            currentBuild.result = 'ABORTED'
            return // early exit to avoid redundant builds
        }
    }
} else {
    print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} triggered by SCM change..."
    print "Proceeding!"
}

pipeline {
    agent { label 'pcsgs02 || pcsgs03 || pcsgs04 || pcsgs05' }

    options {
        buildDiscarder(
            logRotator(
                daysToKeepStr: "21",
                numToKeepStr: "50",
                artifactDaysToKeepStr: "21",
                artifactNumToKeepStr: "50"
            )
        )
    disableConcurrentBuilds()
    }

    triggers {
        githubPush() // Trigger by push to respective github branch
        pollSCM 'H/30 * * * *' // Fallback polling solution as some pushes are somehow lost
    }

    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        BRANCH_NAME = "${env.BRANCH_NAME}"
        WORKSPACE= "${env.WORKSPACE}"

        // DPCPP
        DPCPP_PATH = "${env.WORKSPACE}/llvm/build"
        DPCPP_FORCE_REBUILD = "FALSE"

        // hipSYCL
        HIPSYCL_PATH = "${env.WORKSPACE}/hipsycl-install"
        HIPSYCL_FORCE_REBUILD = "FALSE"

        // install path
        MAKE_INSTALL_PATH = "${env.WORKSPACE}/plssvm_install"
        MAKE_INSTALL_LIBRARY_SAMPLE_REBUILD = "FALSE"
    }

    stages{
        stage('Checkout PLSSVM') {
            steps {
                dir('plssvm') {
                    checkout scm
                }
            }
        }
        stage('Build'){
            matrix{
                axes {
                    axis {
                        name 'BUILD_TYPE'
                        values 'Release', 'Debug', 'RelWithDebInfo'

                    }
                    axis {
                        name 'BACKEND'
                        values 'OPENMP', 'CUDA', 'HIP', 'OPENCL', 'SYCL'
                    }
                }

                agent { label "$([[ '${BACKEND}'' == 'HIP']] && echo 'pcsgs09'  || echo 'pcsgs02 || pcsgs03 || pcsgs04 || pcsgs05')" }
                stages{
                    stage('Build PLSSVM ${BACKEND} -- ${BUILD_TYPE}'){
                        dir('plssvm') {
                            sh '''
                                module load cuda/11.4.3
                                mkdir -p build/${BUILD_TYPE}_${BACKEND}
                                cd build/${BUILD_TYPE}_${BACKEND}
                                rm -rf *
                                rm -rf $MAKE_INSTALL_PATH/${BACKEND}
                                cmake -DCMAKE_INSTALL_PREFIX=$MAKE_INSTALL_PATH/${BACKEND} \
                                    -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
                                    -DPLSSVM_TARGET_PLATFORMS="nvidia:sm_86"  \
                                    -DPLSSVM_ENABLE_ASSERTS=ON \
                                    -DPLSSVM_ENABLE_OPENMP_BACKEND=$([[ $BACKEND == OPENMP ]] && echo "ON" || echo "OFF") \
                                    -DPLSSVM_ENABLE_SYCL_BACKEND=$([[ $BACKEND == SYCL ]] && echo "ON" || echo "OFF") \
                                    -DPLSSVM_ENABLE_CUDA_BACKEND=$([[ $BACKEND == CUDA ]] && echo "ON" || echo "OFF") \
                                    -DPLSSVM_ENABLE_HIP_BACKEND=$([[ $BACKEND == HIP ]] && echo "ON" || echo "OFF") \
                                    -DPLSSVM_ENABLE_OPENCL_BACKEND=$([[ $BACKEND == OPENCL ]] && echo "ON" || echo "OFF") \
                                    ../../
                                make -j4 install
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            // Process the CTest xml output with the xUnit plugin
            xunit (
                testTimeMargin: '3000',
                thresholdMode: 1,
                thresholds: [
                    failed(failureThreshold: '0')
                ],
                tools: [CTest(
                    pattern: 'plssvm/build/*/Testing/**/*.xml',
                    deleteOutputFiles: true,
                    failIfNotNew: false,
                    skipNoTestFiles: true,
                    stopProcessingIfError: true
                )]
            )
        }
        success {
            script {
                buildbadge.setStatus('success')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                     --request POST \
                     --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                     --header "Content-Type: application/json" \
                     --header "authorization: Bearer ${gitlab_token}" \
                     --data "{
                        \\"state\\": \\"success\\",
                        \\"context\\": \\"Jenkins CPU tests\\",
                        \\"description\\": \\"Jenkins CI Job: Jenkins CPU tests\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Github-CPU/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
        failure {
            script {
                buildbadge.setStatus('failing')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                     --request POST \
                     --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                     --header "Content-Type: application/json" \
                     --header "authorization: Bearer ${gitlab_token}" \
                     --data "{
                        \\"state\\": \\"failure\\",
                        \\"context\\": \\"Jenkins CPU tests\\",
                        \\"description\\": \\"Jenkins CI Job: Jenkins CPU tests\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Github-CPU/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
        aborted {
            script {
                buildbadge.setStatus('aborted')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                     --request POST \
                     --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                     --header "Content-Type: application/json" \
                     --header "authorization: Bearer ${gitlab_token}" \
                     --data "{
                        \\"state\\": \\"error\\",
                        \\"context\\": \\"Jenkins CPU tests\\",
                        \\"description\\": \\"Jenkins CI Job: Jenkins CPU tests\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Github-CPU/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
    }
}